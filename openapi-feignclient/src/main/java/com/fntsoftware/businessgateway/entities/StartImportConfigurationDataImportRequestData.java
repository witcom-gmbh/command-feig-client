/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StartImportConfigurationDataImportRequestData
 */
@JsonPropertyOrder({
  StartImportConfigurationDataImportRequestData.JSON_PROPERTY_CASE_SENSITIVE,
  StartImportConfigurationDataImportRequestData.JSON_PROPERTY_FILE_PATH,
  StartImportConfigurationDataImportRequestData.JSON_PROPERTY_TEST_RUN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class StartImportConfigurationDataImportRequestData {
  public static final String JSON_PROPERTY_CASE_SENSITIVE = "caseSensitive";
  private Boolean caseSensitive;

  public static final String JSON_PROPERTY_FILE_PATH = "filePath";
  private String filePath;

  public static final String JSON_PROPERTY_TEST_RUN = "testRun";
  private Boolean testRun;

  public StartImportConfigurationDataImportRequestData() {
  }

  public StartImportConfigurationDataImportRequestData caseSensitive(Boolean caseSensitive) {
    
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCaseSensitive() {
    return caseSensitive;
  }


  @JsonProperty(JSON_PROPERTY_CASE_SENSITIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public StartImportConfigurationDataImportRequestData filePath(String filePath) {
    
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilePath() {
    return filePath;
  }


  @JsonProperty(JSON_PROPERTY_FILE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public StartImportConfigurationDataImportRequestData testRun(Boolean testRun) {
    
    this.testRun = testRun;
    return this;
  }

   /**
   * Get testRun
   * @return testRun
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_RUN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTestRun() {
    return testRun;
  }


  @JsonProperty(JSON_PROPERTY_TEST_RUN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTestRun(Boolean testRun) {
    this.testRun = testRun;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportConfigurationDataImportRequestData startImportConfigurationDataImportRequestData = (StartImportConfigurationDataImportRequestData) o;
    return Objects.equals(this.caseSensitive, startImportConfigurationDataImportRequestData.caseSensitive) &&
        Objects.equals(this.filePath, startImportConfigurationDataImportRequestData.filePath) &&
        Objects.equals(this.testRun, startImportConfigurationDataImportRequestData.testRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseSensitive, filePath, testRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportConfigurationDataImportRequestData {\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    testRun: ").append(toIndentedString(testRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

