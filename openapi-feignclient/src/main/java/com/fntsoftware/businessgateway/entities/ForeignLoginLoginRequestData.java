/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ForeignLoginLoginRequestData
 */
@JsonPropertyOrder({
  ForeignLoginLoginRequestData.JSON_PROPERTY_INTERNAL_USER_PASSWORD,
  ForeignLoginLoginRequestData.JSON_PROPERTY_INTERNAL_USER_NAME,
  ForeignLoginLoginRequestData.JSON_PROPERTY_USER_GROUP_NAME,
  ForeignLoginLoginRequestData.JSON_PROPERTY_MAN_ID,
  ForeignLoginLoginRequestData.JSON_PROPERTY_USER_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class ForeignLoginLoginRequestData {
  public static final String JSON_PROPERTY_INTERNAL_USER_PASSWORD = "internalUserPassword";
  private String internalUserPassword;

  public static final String JSON_PROPERTY_INTERNAL_USER_NAME = "internalUserName";
  private String internalUserName;

  public static final String JSON_PROPERTY_USER_GROUP_NAME = "userGroupName";
  private String userGroupName;

  public static final String JSON_PROPERTY_MAN_ID = "manId";
  private BigDecimal manId;

  public static final String JSON_PROPERTY_USER_NAME = "userName";
  private String userName;

  public ForeignLoginLoginRequestData() {
  }

  public ForeignLoginLoginRequestData internalUserPassword(String internalUserPassword) {
    
    this.internalUserPassword = internalUserPassword;
    return this;
  }

   /**
   * Get internalUserPassword
   * @return internalUserPassword
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_USER_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalUserPassword() {
    return internalUserPassword;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_USER_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalUserPassword(String internalUserPassword) {
    this.internalUserPassword = internalUserPassword;
  }


  public ForeignLoginLoginRequestData internalUserName(String internalUserName) {
    
    this.internalUserName = internalUserName;
    return this;
  }

   /**
   * Get internalUserName
   * @return internalUserName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalUserName() {
    return internalUserName;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalUserName(String internalUserName) {
    this.internalUserName = internalUserName;
  }


  public ForeignLoginLoginRequestData userGroupName(String userGroupName) {
    
    this.userGroupName = userGroupName;
    return this;
  }

   /**
   * Get userGroupName
   * @return userGroupName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserGroupName() {
    return userGroupName;
  }


  @JsonProperty(JSON_PROPERTY_USER_GROUP_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserGroupName(String userGroupName) {
    this.userGroupName = userGroupName;
  }


  public ForeignLoginLoginRequestData manId(BigDecimal manId) {
    
    this.manId = manId;
    return this;
  }

   /**
   * Get manId
   * @return manId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getManId() {
    return manId;
  }


  @JsonProperty(JSON_PROPERTY_MAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManId(BigDecimal manId) {
    this.manId = manId;
  }


  public ForeignLoginLoginRequestData userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(String userName) {
    this.userName = userName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForeignLoginLoginRequestData foreignLoginLoginRequestData = (ForeignLoginLoginRequestData) o;
    return Objects.equals(this.internalUserPassword, foreignLoginLoginRequestData.internalUserPassword) &&
        Objects.equals(this.internalUserName, foreignLoginLoginRequestData.internalUserName) &&
        Objects.equals(this.userGroupName, foreignLoginLoginRequestData.userGroupName) &&
        Objects.equals(this.manId, foreignLoginLoginRequestData.manId) &&
        Objects.equals(this.userName, foreignLoginLoginRequestData.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalUserPassword, internalUserName, userGroupName, manId, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForeignLoginLoginRequestData {\n");
    sb.append("    internalUserPassword: ").append(toIndentedString(internalUserPassword)).append("\n");
    sb.append("    internalUserName: ").append(toIndentedString(internalUserName)).append("\n");
    sb.append("    userGroupName: ").append(toIndentedString(userGroupName)).append("\n");
    sb.append("    manId: ").append(toIndentedString(manId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

