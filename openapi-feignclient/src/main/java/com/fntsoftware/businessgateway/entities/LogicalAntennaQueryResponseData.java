/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * LogicalAntennaQueryResponseData
 */
@JsonPropertyOrder({
  LogicalAntennaQueryResponseData.JSON_PROPERTY_SIDELOBE_SUPPRESSION,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_BEAMWIDTH_VERTICAL,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_CROSS_POLAR_RATIO,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_GAIN_ALL_TILTS,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_GAIN_MID_TILT,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_MAX_POWER_INPUT,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_BEAMWIDTH_HORIZONTAL,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_IMPEDANCE,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_REMARK,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_ELID,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_FREQUENCY,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_BAND_FREQUENCY_RANGE,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_FRONT_TO_BACK_RATIO,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_ANTENNA_TYPE_ELID,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_ELECTRICAL_DOWNTILT,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_MID_TILT,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_NAME,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_ISOLATION_BETWEEN_PORTS,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_REMARK_TECHNICAL,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_BAND,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_ID,
  LogicalAntennaQueryResponseData.JSON_PROPERTY_POWER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class LogicalAntennaQueryResponseData {
  public static final String JSON_PROPERTY_SIDELOBE_SUPPRESSION = "sidelobeSuppression";
  private String sidelobeSuppression;

  public static final String JSON_PROPERTY_BEAMWIDTH_VERTICAL = "beamwidthVertical";
  private BigDecimal beamwidthVertical;

  public static final String JSON_PROPERTY_CROSS_POLAR_RATIO = "crossPolarRatio";
  private String crossPolarRatio;

  public static final String JSON_PROPERTY_GAIN_ALL_TILTS = "gainAllTilts";
  private BigDecimal gainAllTilts;

  public static final String JSON_PROPERTY_GAIN_MID_TILT = "gainMidTilt";
  private BigDecimal gainMidTilt;

  public static final String JSON_PROPERTY_MAX_POWER_INPUT = "maxPowerInput";
  private BigDecimal maxPowerInput;

  public static final String JSON_PROPERTY_BEAMWIDTH_HORIZONTAL = "beamwidthHorizontal";
  private BigDecimal beamwidthHorizontal;

  public static final String JSON_PROPERTY_IMPEDANCE = "impedance";
  private BigDecimal impedance;

  public static final String JSON_PROPERTY_REMARK = "remark";
  private String remark;

  public static final String JSON_PROPERTY_ELID = "elid";
  private String elid;

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private BigDecimal frequency;

  public static final String JSON_PROPERTY_BAND_FREQUENCY_RANGE = "bandFrequencyRange";
  private String bandFrequencyRange;

  public static final String JSON_PROPERTY_FRONT_TO_BACK_RATIO = "frontToBackRatio";
  private String frontToBackRatio;

  public static final String JSON_PROPERTY_ANTENNA_TYPE_ELID = "antennaTypeElid";
  private String antennaTypeElid;

  public static final String JSON_PROPERTY_ELECTRICAL_DOWNTILT = "electricalDowntilt";
  private String electricalDowntilt;

  public static final String JSON_PROPERTY_MID_TILT = "midTilt";
  private BigDecimal midTilt;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ISOLATION_BETWEEN_PORTS = "isolationBetweenPorts";
  private String isolationBetweenPorts;

  public static final String JSON_PROPERTY_REMARK_TECHNICAL = "remarkTechnical";
  private String remarkTechnical;

  public static final String JSON_PROPERTY_BAND = "band";
  private String band;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_POWER = "power";
  private BigDecimal power;

  public LogicalAntennaQueryResponseData() {
  }

  public LogicalAntennaQueryResponseData sidelobeSuppression(String sidelobeSuppression) {
    
    this.sidelobeSuppression = sidelobeSuppression;
    return this;
  }

   /**
   * Get sidelobeSuppression
   * @return sidelobeSuppression
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDELOBE_SUPPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSidelobeSuppression() {
    return sidelobeSuppression;
  }


  @JsonProperty(JSON_PROPERTY_SIDELOBE_SUPPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSidelobeSuppression(String sidelobeSuppression) {
    this.sidelobeSuppression = sidelobeSuppression;
  }


  public LogicalAntennaQueryResponseData beamwidthVertical(BigDecimal beamwidthVertical) {
    
    this.beamwidthVertical = beamwidthVertical;
    return this;
  }

   /**
   * Get beamwidthVertical
   * @return beamwidthVertical
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEAMWIDTH_VERTICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBeamwidthVertical() {
    return beamwidthVertical;
  }


  @JsonProperty(JSON_PROPERTY_BEAMWIDTH_VERTICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeamwidthVertical(BigDecimal beamwidthVertical) {
    this.beamwidthVertical = beamwidthVertical;
  }


  public LogicalAntennaQueryResponseData crossPolarRatio(String crossPolarRatio) {
    
    this.crossPolarRatio = crossPolarRatio;
    return this;
  }

   /**
   * Get crossPolarRatio
   * @return crossPolarRatio
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CROSS_POLAR_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCrossPolarRatio() {
    return crossPolarRatio;
  }


  @JsonProperty(JSON_PROPERTY_CROSS_POLAR_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCrossPolarRatio(String crossPolarRatio) {
    this.crossPolarRatio = crossPolarRatio;
  }


  public LogicalAntennaQueryResponseData gainAllTilts(BigDecimal gainAllTilts) {
    
    this.gainAllTilts = gainAllTilts;
    return this;
  }

   /**
   * Get gainAllTilts
   * @return gainAllTilts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GAIN_ALL_TILTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGainAllTilts() {
    return gainAllTilts;
  }


  @JsonProperty(JSON_PROPERTY_GAIN_ALL_TILTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGainAllTilts(BigDecimal gainAllTilts) {
    this.gainAllTilts = gainAllTilts;
  }


  public LogicalAntennaQueryResponseData gainMidTilt(BigDecimal gainMidTilt) {
    
    this.gainMidTilt = gainMidTilt;
    return this;
  }

   /**
   * Get gainMidTilt
   * @return gainMidTilt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GAIN_MID_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGainMidTilt() {
    return gainMidTilt;
  }


  @JsonProperty(JSON_PROPERTY_GAIN_MID_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGainMidTilt(BigDecimal gainMidTilt) {
    this.gainMidTilt = gainMidTilt;
  }


  public LogicalAntennaQueryResponseData maxPowerInput(BigDecimal maxPowerInput) {
    
    this.maxPowerInput = maxPowerInput;
    return this;
  }

   /**
   * Get maxPowerInput
   * @return maxPowerInput
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_POWER_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaxPowerInput() {
    return maxPowerInput;
  }


  @JsonProperty(JSON_PROPERTY_MAX_POWER_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxPowerInput(BigDecimal maxPowerInput) {
    this.maxPowerInput = maxPowerInput;
  }


  public LogicalAntennaQueryResponseData beamwidthHorizontal(BigDecimal beamwidthHorizontal) {
    
    this.beamwidthHorizontal = beamwidthHorizontal;
    return this;
  }

   /**
   * Get beamwidthHorizontal
   * @return beamwidthHorizontal
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEAMWIDTH_HORIZONTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBeamwidthHorizontal() {
    return beamwidthHorizontal;
  }


  @JsonProperty(JSON_PROPERTY_BEAMWIDTH_HORIZONTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeamwidthHorizontal(BigDecimal beamwidthHorizontal) {
    this.beamwidthHorizontal = beamwidthHorizontal;
  }


  public LogicalAntennaQueryResponseData impedance(BigDecimal impedance) {
    
    this.impedance = impedance;
    return this;
  }

   /**
   * Get impedance
   * @return impedance
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMPEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getImpedance() {
    return impedance;
  }


  @JsonProperty(JSON_PROPERTY_IMPEDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImpedance(BigDecimal impedance) {
    this.impedance = impedance;
  }


  public LogicalAntennaQueryResponseData remark(String remark) {
    
    this.remark = remark;
    return this;
  }

   /**
   * Get remark
   * @return remark
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemark() {
    return remark;
  }


  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemark(String remark) {
    this.remark = remark;
  }


  public LogicalAntennaQueryResponseData elid(String elid) {
    
    this.elid = elid;
    return this;
  }

   /**
   * Get elid
   * @return elid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElid() {
    return elid;
  }


  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElid(String elid) {
    this.elid = elid;
  }


  public LogicalAntennaQueryResponseData frequency(BigDecimal frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequency(BigDecimal frequency) {
    this.frequency = frequency;
  }


  public LogicalAntennaQueryResponseData bandFrequencyRange(String bandFrequencyRange) {
    
    this.bandFrequencyRange = bandFrequencyRange;
    return this;
  }

   /**
   * Get bandFrequencyRange
   * @return bandFrequencyRange
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BAND_FREQUENCY_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBandFrequencyRange() {
    return bandFrequencyRange;
  }


  @JsonProperty(JSON_PROPERTY_BAND_FREQUENCY_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandFrequencyRange(String bandFrequencyRange) {
    this.bandFrequencyRange = bandFrequencyRange;
  }


  public LogicalAntennaQueryResponseData frontToBackRatio(String frontToBackRatio) {
    
    this.frontToBackRatio = frontToBackRatio;
    return this;
  }

   /**
   * Get frontToBackRatio
   * @return frontToBackRatio
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FRONT_TO_BACK_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFrontToBackRatio() {
    return frontToBackRatio;
  }


  @JsonProperty(JSON_PROPERTY_FRONT_TO_BACK_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrontToBackRatio(String frontToBackRatio) {
    this.frontToBackRatio = frontToBackRatio;
  }


  public LogicalAntennaQueryResponseData antennaTypeElid(String antennaTypeElid) {
    
    this.antennaTypeElid = antennaTypeElid;
    return this;
  }

   /**
   * Get antennaTypeElid
   * @return antennaTypeElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANTENNA_TYPE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAntennaTypeElid() {
    return antennaTypeElid;
  }


  @JsonProperty(JSON_PROPERTY_ANTENNA_TYPE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAntennaTypeElid(String antennaTypeElid) {
    this.antennaTypeElid = antennaTypeElid;
  }


  public LogicalAntennaQueryResponseData electricalDowntilt(String electricalDowntilt) {
    
    this.electricalDowntilt = electricalDowntilt;
    return this;
  }

   /**
   * Get electricalDowntilt
   * @return electricalDowntilt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELECTRICAL_DOWNTILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElectricalDowntilt() {
    return electricalDowntilt;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRICAL_DOWNTILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElectricalDowntilt(String electricalDowntilt) {
    this.electricalDowntilt = electricalDowntilt;
  }


  public LogicalAntennaQueryResponseData midTilt(BigDecimal midTilt) {
    
    this.midTilt = midTilt;
    return this;
  }

   /**
   * Get midTilt
   * @return midTilt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MID_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMidTilt() {
    return midTilt;
  }


  @JsonProperty(JSON_PROPERTY_MID_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMidTilt(BigDecimal midTilt) {
    this.midTilt = midTilt;
  }


  public LogicalAntennaQueryResponseData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public LogicalAntennaQueryResponseData isolationBetweenPorts(String isolationBetweenPorts) {
    
    this.isolationBetweenPorts = isolationBetweenPorts;
    return this;
  }

   /**
   * Get isolationBetweenPorts
   * @return isolationBetweenPorts
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISOLATION_BETWEEN_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIsolationBetweenPorts() {
    return isolationBetweenPorts;
  }


  @JsonProperty(JSON_PROPERTY_ISOLATION_BETWEEN_PORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsolationBetweenPorts(String isolationBetweenPorts) {
    this.isolationBetweenPorts = isolationBetweenPorts;
  }


  public LogicalAntennaQueryResponseData remarkTechnical(String remarkTechnical) {
    
    this.remarkTechnical = remarkTechnical;
    return this;
  }

   /**
   * Get remarkTechnical
   * @return remarkTechnical
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMARK_TECHNICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemarkTechnical() {
    return remarkTechnical;
  }


  @JsonProperty(JSON_PROPERTY_REMARK_TECHNICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemarkTechnical(String remarkTechnical) {
    this.remarkTechnical = remarkTechnical;
  }


  public LogicalAntennaQueryResponseData band(String band) {
    
    this.band = band;
    return this;
  }

   /**
   * Get band
   * @return band
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBand() {
    return band;
  }


  @JsonProperty(JSON_PROPERTY_BAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBand(String band) {
    this.band = band;
  }


  public LogicalAntennaQueryResponseData id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public LogicalAntennaQueryResponseData power(BigDecimal power) {
    
    this.power = power;
    return this;
  }

   /**
   * Get power
   * @return power
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPower() {
    return power;
  }


  @JsonProperty(JSON_PROPERTY_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPower(BigDecimal power) {
    this.power = power;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalAntennaQueryResponseData logicalAntennaQueryResponseData = (LogicalAntennaQueryResponseData) o;
    return Objects.equals(this.sidelobeSuppression, logicalAntennaQueryResponseData.sidelobeSuppression) &&
        Objects.equals(this.beamwidthVertical, logicalAntennaQueryResponseData.beamwidthVertical) &&
        Objects.equals(this.crossPolarRatio, logicalAntennaQueryResponseData.crossPolarRatio) &&
        Objects.equals(this.gainAllTilts, logicalAntennaQueryResponseData.gainAllTilts) &&
        Objects.equals(this.gainMidTilt, logicalAntennaQueryResponseData.gainMidTilt) &&
        Objects.equals(this.maxPowerInput, logicalAntennaQueryResponseData.maxPowerInput) &&
        Objects.equals(this.beamwidthHorizontal, logicalAntennaQueryResponseData.beamwidthHorizontal) &&
        Objects.equals(this.impedance, logicalAntennaQueryResponseData.impedance) &&
        Objects.equals(this.remark, logicalAntennaQueryResponseData.remark) &&
        Objects.equals(this.elid, logicalAntennaQueryResponseData.elid) &&
        Objects.equals(this.frequency, logicalAntennaQueryResponseData.frequency) &&
        Objects.equals(this.bandFrequencyRange, logicalAntennaQueryResponseData.bandFrequencyRange) &&
        Objects.equals(this.frontToBackRatio, logicalAntennaQueryResponseData.frontToBackRatio) &&
        Objects.equals(this.antennaTypeElid, logicalAntennaQueryResponseData.antennaTypeElid) &&
        Objects.equals(this.electricalDowntilt, logicalAntennaQueryResponseData.electricalDowntilt) &&
        Objects.equals(this.midTilt, logicalAntennaQueryResponseData.midTilt) &&
        Objects.equals(this.name, logicalAntennaQueryResponseData.name) &&
        Objects.equals(this.isolationBetweenPorts, logicalAntennaQueryResponseData.isolationBetweenPorts) &&
        Objects.equals(this.remarkTechnical, logicalAntennaQueryResponseData.remarkTechnical) &&
        Objects.equals(this.band, logicalAntennaQueryResponseData.band) &&
        Objects.equals(this.id, logicalAntennaQueryResponseData.id) &&
        Objects.equals(this.power, logicalAntennaQueryResponseData.power);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sidelobeSuppression, beamwidthVertical, crossPolarRatio, gainAllTilts, gainMidTilt, maxPowerInput, beamwidthHorizontal, impedance, remark, elid, frequency, bandFrequencyRange, frontToBackRatio, antennaTypeElid, electricalDowntilt, midTilt, name, isolationBetweenPorts, remarkTechnical, band, id, power);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalAntennaQueryResponseData {\n");
    sb.append("    sidelobeSuppression: ").append(toIndentedString(sidelobeSuppression)).append("\n");
    sb.append("    beamwidthVertical: ").append(toIndentedString(beamwidthVertical)).append("\n");
    sb.append("    crossPolarRatio: ").append(toIndentedString(crossPolarRatio)).append("\n");
    sb.append("    gainAllTilts: ").append(toIndentedString(gainAllTilts)).append("\n");
    sb.append("    gainMidTilt: ").append(toIndentedString(gainMidTilt)).append("\n");
    sb.append("    maxPowerInput: ").append(toIndentedString(maxPowerInput)).append("\n");
    sb.append("    beamwidthHorizontal: ").append(toIndentedString(beamwidthHorizontal)).append("\n");
    sb.append("    impedance: ").append(toIndentedString(impedance)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    elid: ").append(toIndentedString(elid)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    bandFrequencyRange: ").append(toIndentedString(bandFrequencyRange)).append("\n");
    sb.append("    frontToBackRatio: ").append(toIndentedString(frontToBackRatio)).append("\n");
    sb.append("    antennaTypeElid: ").append(toIndentedString(antennaTypeElid)).append("\n");
    sb.append("    electricalDowntilt: ").append(toIndentedString(electricalDowntilt)).append("\n");
    sb.append("    midTilt: ").append(toIndentedString(midTilt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isolationBetweenPorts: ").append(toIndentedString(isolationBetweenPorts)).append("\n");
    sb.append("    remarkTechnical: ").append(toIndentedString(remarkTechnical)).append("\n");
    sb.append("    band: ").append(toIndentedString(band)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

