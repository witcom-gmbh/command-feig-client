/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortDataCreateLinkCustomPatchpointRequestData;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortDataCreateLinkIpAddressRequestData;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortDataCreateNewInterfaceRequestData;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortDataDeleteLinkInterfaceRequestData;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortDataDeleteLinkIpAddressRequestData;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdatePhysicalPortDataRequestData
 */
@JsonPropertyOrder({
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_SOURCE_ID,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_BORDER_COLOR,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_WWN_ADDRESS,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_NOTES,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_PORT_STATE,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_SOCKET_NAME,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_VLAN_ID,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_SOURCE_SYSTEM,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_PORT_NETWORK_CATEGORY,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_CONTEXT_ID,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_VTP_DOMAIN,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_PORT_DUPLEX,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_VLAN,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_PORT_SPEED,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_VLAN_TYPE,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_CREATE_LINK_IP_ADDRESS,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_CREATE_NEW_INTERFACE,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_DELETE_LINK_INTERFACE,
  UpdatePhysicalPortDataRequestData.JSON_PROPERTY_DELETE_LINK_IP_ADDRESS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class UpdatePhysicalPortDataRequestData {
  public static final String JSON_PROPERTY_SOURCE_ID = "sourceId";
  private String sourceId;

  public static final String JSON_PROPERTY_BORDER_COLOR = "borderColor";
  private String borderColor;

  public static final String JSON_PROPERTY_WWN_ADDRESS = "wwnAddress";
  private String wwnAddress;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_PORT_STATE = "portState";
  private String portState;

  public static final String JSON_PROPERTY_SOCKET_NAME = "socketName";
  private String socketName;

  public static final String JSON_PROPERTY_VLAN_ID = "vlanId";
  private BigDecimal vlanId;

  public static final String JSON_PROPERTY_SOURCE_SYSTEM = "sourceSystem";
  private String sourceSystem;

  public static final String JSON_PROPERTY_PORT_NETWORK_CATEGORY = "portNetworkCategory";
  private String portNetworkCategory;

  public static final String JSON_PROPERTY_CONTEXT_ID = "contextId";
  private String contextId;

  public static final String JSON_PROPERTY_VTP_DOMAIN = "vtpDomain";
  private String vtpDomain;

  public static final String JSON_PROPERTY_PORT_DUPLEX = "portDuplex";
  private String portDuplex;

  public static final String JSON_PROPERTY_VLAN = "vlan";
  private String vlan;

  public static final String JSON_PROPERTY_PORT_SPEED = "portSpeed";
  private String portSpeed;

  public static final String JSON_PROPERTY_VLAN_TYPE = "vlanType";
  private String vlanType;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT = "createLinkCustomPatchpoint";
  private UpdatePhysicalPortDataCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint;

  public static final String JSON_PROPERTY_CREATE_LINK_IP_ADDRESS = "createLinkIpAddress";
  private List<UpdatePhysicalPortDataCreateLinkIpAddressRequestData> createLinkIpAddress;

  public static final String JSON_PROPERTY_CREATE_NEW_INTERFACE = "createNewInterface";
  private List<UpdatePhysicalPortDataCreateNewInterfaceRequestData> createNewInterface;

  public static final String JSON_PROPERTY_DELETE_LINK_INTERFACE = "deleteLinkInterface";
  private List<UpdatePhysicalPortDataDeleteLinkInterfaceRequestData> deleteLinkInterface;

  public static final String JSON_PROPERTY_DELETE_LINK_IP_ADDRESS = "deleteLinkIpAddress";
  private List<UpdatePhysicalPortDataDeleteLinkIpAddressRequestData> deleteLinkIpAddress;

  public UpdatePhysicalPortDataRequestData() {
  }

  public UpdatePhysicalPortDataRequestData sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceId() {
    return sourceId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public UpdatePhysicalPortDataRequestData borderColor(String borderColor) {
    
    this.borderColor = borderColor;
    return this;
  }

   /**
   * Get borderColor
   * @return borderColor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BORDER_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBorderColor() {
    return borderColor;
  }


  @JsonProperty(JSON_PROPERTY_BORDER_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBorderColor(String borderColor) {
    this.borderColor = borderColor;
  }


  public UpdatePhysicalPortDataRequestData wwnAddress(String wwnAddress) {
    
    this.wwnAddress = wwnAddress;
    return this;
  }

   /**
   * Get wwnAddress
   * @return wwnAddress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WWN_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWwnAddress() {
    return wwnAddress;
  }


  @JsonProperty(JSON_PROPERTY_WWN_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWwnAddress(String wwnAddress) {
    this.wwnAddress = wwnAddress;
  }


  public UpdatePhysicalPortDataRequestData notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(String notes) {
    this.notes = notes;
  }


  public UpdatePhysicalPortDataRequestData portState(String portState) {
    
    this.portState = portState;
    return this;
  }

   /**
   * Get portState
   * @return portState
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortState() {
    return portState;
  }


  @JsonProperty(JSON_PROPERTY_PORT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortState(String portState) {
    this.portState = portState;
  }


  public UpdatePhysicalPortDataRequestData socketName(String socketName) {
    
    this.socketName = socketName;
    return this;
  }

   /**
   * Get socketName
   * @return socketName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSocketName() {
    return socketName;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketName(String socketName) {
    this.socketName = socketName;
  }


  public UpdatePhysicalPortDataRequestData vlanId(BigDecimal vlanId) {
    
    this.vlanId = vlanId;
    return this;
  }

   /**
   * Get vlanId
   * @return vlanId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VLAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getVlanId() {
    return vlanId;
  }


  @JsonProperty(JSON_PROPERTY_VLAN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVlanId(BigDecimal vlanId) {
    this.vlanId = vlanId;
  }


  public UpdatePhysicalPortDataRequestData sourceSystem(String sourceSystem) {
    
    this.sourceSystem = sourceSystem;
    return this;
  }

   /**
   * Get sourceSystem
   * @return sourceSystem
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceSystem() {
    return sourceSystem;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceSystem(String sourceSystem) {
    this.sourceSystem = sourceSystem;
  }


  public UpdatePhysicalPortDataRequestData portNetworkCategory(String portNetworkCategory) {
    
    this.portNetworkCategory = portNetworkCategory;
    return this;
  }

   /**
   * Get portNetworkCategory
   * @return portNetworkCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortNetworkCategory() {
    return portNetworkCategory;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNetworkCategory(String portNetworkCategory) {
    this.portNetworkCategory = portNetworkCategory;
  }


  public UpdatePhysicalPortDataRequestData contextId(String contextId) {
    
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContextId() {
    return contextId;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextId(String contextId) {
    this.contextId = contextId;
  }


  public UpdatePhysicalPortDataRequestData vtpDomain(String vtpDomain) {
    
    this.vtpDomain = vtpDomain;
    return this;
  }

   /**
   * Get vtpDomain
   * @return vtpDomain
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VTP_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVtpDomain() {
    return vtpDomain;
  }


  @JsonProperty(JSON_PROPERTY_VTP_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVtpDomain(String vtpDomain) {
    this.vtpDomain = vtpDomain;
  }


  public UpdatePhysicalPortDataRequestData portDuplex(String portDuplex) {
    
    this.portDuplex = portDuplex;
    return this;
  }

   /**
   * Get portDuplex
   * @return portDuplex
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_DUPLEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortDuplex() {
    return portDuplex;
  }


  @JsonProperty(JSON_PROPERTY_PORT_DUPLEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortDuplex(String portDuplex) {
    this.portDuplex = portDuplex;
  }


  public UpdatePhysicalPortDataRequestData vlan(String vlan) {
    
    this.vlan = vlan;
    return this;
  }

   /**
   * Get vlan
   * @return vlan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVlan() {
    return vlan;
  }


  @JsonProperty(JSON_PROPERTY_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVlan(String vlan) {
    this.vlan = vlan;
  }


  public UpdatePhysicalPortDataRequestData portSpeed(String portSpeed) {
    
    this.portSpeed = portSpeed;
    return this;
  }

   /**
   * Get portSpeed
   * @return portSpeed
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortSpeed() {
    return portSpeed;
  }


  @JsonProperty(JSON_PROPERTY_PORT_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortSpeed(String portSpeed) {
    this.portSpeed = portSpeed;
  }


  public UpdatePhysicalPortDataRequestData vlanType(String vlanType) {
    
    this.vlanType = vlanType;
    return this;
  }

   /**
   * Get vlanType
   * @return vlanType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVlanType() {
    return vlanType;
  }


  @JsonProperty(JSON_PROPERTY_VLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVlanType(String vlanType) {
    this.vlanType = vlanType;
  }


  public UpdatePhysicalPortDataRequestData createLinkCustomPatchpoint(UpdatePhysicalPortDataCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint) {
    
    this.createLinkCustomPatchpoint = createLinkCustomPatchpoint;
    return this;
  }

   /**
   * Get createLinkCustomPatchpoint
   * @return createLinkCustomPatchpoint
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpdatePhysicalPortDataCreateLinkCustomPatchpointRequestData getCreateLinkCustomPatchpoint() {
    return createLinkCustomPatchpoint;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomPatchpoint(UpdatePhysicalPortDataCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint) {
    this.createLinkCustomPatchpoint = createLinkCustomPatchpoint;
  }


  public UpdatePhysicalPortDataRequestData createLinkIpAddress(List<UpdatePhysicalPortDataCreateLinkIpAddressRequestData> createLinkIpAddress) {
    
    this.createLinkIpAddress = createLinkIpAddress;
    return this;
  }

  public UpdatePhysicalPortDataRequestData addCreateLinkIpAddressItem(UpdatePhysicalPortDataCreateLinkIpAddressRequestData createLinkIpAddressItem) {
    if (this.createLinkIpAddress == null) {
      this.createLinkIpAddress = new ArrayList<>();
    }
    this.createLinkIpAddress.add(createLinkIpAddressItem);
    return this;
  }

   /**
   * Get createLinkIpAddress
   * @return createLinkIpAddress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UpdatePhysicalPortDataCreateLinkIpAddressRequestData> getCreateLinkIpAddress() {
    return createLinkIpAddress;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkIpAddress(List<UpdatePhysicalPortDataCreateLinkIpAddressRequestData> createLinkIpAddress) {
    this.createLinkIpAddress = createLinkIpAddress;
  }


  public UpdatePhysicalPortDataRequestData createNewInterface(List<UpdatePhysicalPortDataCreateNewInterfaceRequestData> createNewInterface) {
    
    this.createNewInterface = createNewInterface;
    return this;
  }

  public UpdatePhysicalPortDataRequestData addCreateNewInterfaceItem(UpdatePhysicalPortDataCreateNewInterfaceRequestData createNewInterfaceItem) {
    if (this.createNewInterface == null) {
      this.createNewInterface = new ArrayList<>();
    }
    this.createNewInterface.add(createNewInterfaceItem);
    return this;
  }

   /**
   * Get createNewInterface
   * @return createNewInterface
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_NEW_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UpdatePhysicalPortDataCreateNewInterfaceRequestData> getCreateNewInterface() {
    return createNewInterface;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_NEW_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateNewInterface(List<UpdatePhysicalPortDataCreateNewInterfaceRequestData> createNewInterface) {
    this.createNewInterface = createNewInterface;
  }


  public UpdatePhysicalPortDataRequestData deleteLinkInterface(List<UpdatePhysicalPortDataDeleteLinkInterfaceRequestData> deleteLinkInterface) {
    
    this.deleteLinkInterface = deleteLinkInterface;
    return this;
  }

  public UpdatePhysicalPortDataRequestData addDeleteLinkInterfaceItem(UpdatePhysicalPortDataDeleteLinkInterfaceRequestData deleteLinkInterfaceItem) {
    if (this.deleteLinkInterface == null) {
      this.deleteLinkInterface = new ArrayList<>();
    }
    this.deleteLinkInterface.add(deleteLinkInterfaceItem);
    return this;
  }

   /**
   * Get deleteLinkInterface
   * @return deleteLinkInterface
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_LINK_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UpdatePhysicalPortDataDeleteLinkInterfaceRequestData> getDeleteLinkInterface() {
    return deleteLinkInterface;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_LINK_INTERFACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteLinkInterface(List<UpdatePhysicalPortDataDeleteLinkInterfaceRequestData> deleteLinkInterface) {
    this.deleteLinkInterface = deleteLinkInterface;
  }


  public UpdatePhysicalPortDataRequestData deleteLinkIpAddress(List<UpdatePhysicalPortDataDeleteLinkIpAddressRequestData> deleteLinkIpAddress) {
    
    this.deleteLinkIpAddress = deleteLinkIpAddress;
    return this;
  }

  public UpdatePhysicalPortDataRequestData addDeleteLinkIpAddressItem(UpdatePhysicalPortDataDeleteLinkIpAddressRequestData deleteLinkIpAddressItem) {
    if (this.deleteLinkIpAddress == null) {
      this.deleteLinkIpAddress = new ArrayList<>();
    }
    this.deleteLinkIpAddress.add(deleteLinkIpAddressItem);
    return this;
  }

   /**
   * Get deleteLinkIpAddress
   * @return deleteLinkIpAddress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_LINK_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UpdatePhysicalPortDataDeleteLinkIpAddressRequestData> getDeleteLinkIpAddress() {
    return deleteLinkIpAddress;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_LINK_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteLinkIpAddress(List<UpdatePhysicalPortDataDeleteLinkIpAddressRequestData> deleteLinkIpAddress) {
    this.deleteLinkIpAddress = deleteLinkIpAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePhysicalPortDataRequestData updatePhysicalPortDataRequestData = (UpdatePhysicalPortDataRequestData) o;
    return Objects.equals(this.sourceId, updatePhysicalPortDataRequestData.sourceId) &&
        Objects.equals(this.borderColor, updatePhysicalPortDataRequestData.borderColor) &&
        Objects.equals(this.wwnAddress, updatePhysicalPortDataRequestData.wwnAddress) &&
        Objects.equals(this.notes, updatePhysicalPortDataRequestData.notes) &&
        Objects.equals(this.portState, updatePhysicalPortDataRequestData.portState) &&
        Objects.equals(this.socketName, updatePhysicalPortDataRequestData.socketName) &&
        Objects.equals(this.vlanId, updatePhysicalPortDataRequestData.vlanId) &&
        Objects.equals(this.sourceSystem, updatePhysicalPortDataRequestData.sourceSystem) &&
        Objects.equals(this.portNetworkCategory, updatePhysicalPortDataRequestData.portNetworkCategory) &&
        Objects.equals(this.contextId, updatePhysicalPortDataRequestData.contextId) &&
        Objects.equals(this.vtpDomain, updatePhysicalPortDataRequestData.vtpDomain) &&
        Objects.equals(this.portDuplex, updatePhysicalPortDataRequestData.portDuplex) &&
        Objects.equals(this.vlan, updatePhysicalPortDataRequestData.vlan) &&
        Objects.equals(this.portSpeed, updatePhysicalPortDataRequestData.portSpeed) &&
        Objects.equals(this.vlanType, updatePhysicalPortDataRequestData.vlanType) &&
        Objects.equals(this.createLinkCustomPatchpoint, updatePhysicalPortDataRequestData.createLinkCustomPatchpoint) &&
        Objects.equals(this.createLinkIpAddress, updatePhysicalPortDataRequestData.createLinkIpAddress) &&
        Objects.equals(this.createNewInterface, updatePhysicalPortDataRequestData.createNewInterface) &&
        Objects.equals(this.deleteLinkInterface, updatePhysicalPortDataRequestData.deleteLinkInterface) &&
        Objects.equals(this.deleteLinkIpAddress, updatePhysicalPortDataRequestData.deleteLinkIpAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, borderColor, wwnAddress, notes, portState, socketName, vlanId, sourceSystem, portNetworkCategory, contextId, vtpDomain, portDuplex, vlan, portSpeed, vlanType, createLinkCustomPatchpoint, createLinkIpAddress, createNewInterface, deleteLinkInterface, deleteLinkIpAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePhysicalPortDataRequestData {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    borderColor: ").append(toIndentedString(borderColor)).append("\n");
    sb.append("    wwnAddress: ").append(toIndentedString(wwnAddress)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    portState: ").append(toIndentedString(portState)).append("\n");
    sb.append("    socketName: ").append(toIndentedString(socketName)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("    sourceSystem: ").append(toIndentedString(sourceSystem)).append("\n");
    sb.append("    portNetworkCategory: ").append(toIndentedString(portNetworkCategory)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    vtpDomain: ").append(toIndentedString(vtpDomain)).append("\n");
    sb.append("    portDuplex: ").append(toIndentedString(portDuplex)).append("\n");
    sb.append("    vlan: ").append(toIndentedString(vlan)).append("\n");
    sb.append("    portSpeed: ").append(toIndentedString(portSpeed)).append("\n");
    sb.append("    vlanType: ").append(toIndentedString(vlanType)).append("\n");
    sb.append("    createLinkCustomPatchpoint: ").append(toIndentedString(createLinkCustomPatchpoint)).append("\n");
    sb.append("    createLinkIpAddress: ").append(toIndentedString(createLinkIpAddress)).append("\n");
    sb.append("    createNewInterface: ").append(toIndentedString(createNewInterface)).append("\n");
    sb.append("    deleteLinkInterface: ").append(toIndentedString(deleteLinkInterface)).append("\n");
    sb.append("    deleteLinkIpAddress: ").append(toIndentedString(deleteLinkIpAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

