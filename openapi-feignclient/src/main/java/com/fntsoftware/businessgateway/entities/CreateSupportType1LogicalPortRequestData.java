/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240226111547
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkCustomIpaccessSvcRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkCustomSvidCVlanRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkCustomSvidSVlanRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkCustomSvidVlanRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkCustomTcoInterconnectRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType1LogicalPortCreateLinkDeviceAllRequestData;
import java.math.BigDecimal;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateSupportType1LogicalPortRequestData
 */
@JsonPropertyOrder({
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_RX_BLOCK_FLAG,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_SOURCE_SYSTEM,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE_ID,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PHYS_PORT2,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_STATUS,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_TX_BLOCK_FLAG,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_NO,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_ATM,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_NAME_ORG,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_SIGNAL_RATE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_ACTIVE_FROM,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_NOMINAL_UTILIZATION,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE_DELETED,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_C_SERVICE_SIDE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_OVERLOAD_WARNING,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_BANDWIDTH,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CONTEXT_ID,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_CATEGORY,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PHYS_PORT2_SIDE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_TYPE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PHYS_PORT,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PHYS_PORT_SIDE,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_PORT_FUNCTION,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_IMA,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_ACTIVE_UNTIL,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_C_VLAN,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_S_VLAN,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_VLAN,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT,
  CreateSupportType1LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_DEVICE_ALL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-26T11:20:24.990023935Z[Etc/UTC]")
public class CreateSupportType1LogicalPortRequestData {
  public static final String JSON_PROPERTY_RX_BLOCK_FLAG = "rxBlockFlag";
  private Boolean rxBlockFlag;

  public static final String JSON_PROPERTY_SOURCE_SYSTEM = "sourceSystem";
  private String sourceSystem;

  public static final String JSON_PROPERTY_C_DATA_SOURCE_ID = "cDataSourceId";
  private String cDataSourceId;

  public static final String JSON_PROPERTY_PHYS_PORT2 = "physPort2";
  private BigDecimal physPort2;

  public static final String JSON_PROPERTY_PORT_STATUS = "portStatus";
  private String portStatus;

  public static final String JSON_PROPERTY_TX_BLOCK_FLAG = "txBlockFlag";
  private Boolean txBlockFlag;

  public static final String JSON_PROPERTY_PORT_NO = "portNo";
  private BigDecimal portNo;

  public static final String JSON_PROPERTY_ATM = "atm";
  private Boolean atm;

  public static final String JSON_PROPERTY_PORT_NAME_ORG = "portNameOrg";
  private String portNameOrg;

  public static final String JSON_PROPERTY_SIGNAL_RATE = "signalRate";
  private String signalRate;

  public static final String JSON_PROPERTY_ACTIVE_FROM = "activeFrom";
  private DateTime activeFrom;

  public static final String JSON_PROPERTY_NOMINAL_UTILIZATION = "nominalUtilization";
  private BigDecimal nominalUtilization;

  public static final String JSON_PROPERTY_C_DATA_SOURCE_DELETED = "cDataSourceDeleted";
  private String cDataSourceDeleted;

  public static final String JSON_PROPERTY_C_SERVICE_SIDE = "cServiceSide";
  private String cServiceSide;

  public static final String JSON_PROPERTY_OVERLOAD_WARNING = "overloadWarning";
  private String overloadWarning;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private BigDecimal bandwidth;

  public static final String JSON_PROPERTY_CONTEXT_ID = "contextId";
  private String contextId;

  public static final String JSON_PROPERTY_PORT_CATEGORY = "portCategory";
  private String portCategory;

  public static final String JSON_PROPERTY_PHYS_PORT2_SIDE = "physPort2Side";
  private String physPort2Side;

  public static final String JSON_PROPERTY_PORT_TYPE = "portType";
  private String portType;

  public static final String JSON_PROPERTY_C_DATA_SOURCE = "cDataSource";
  private String cDataSource;

  public static final String JSON_PROPERTY_PHYS_PORT = "physPort";
  private BigDecimal physPort;

  public static final String JSON_PROPERTY_PHYS_PORT_SIDE = "physPortSide";
  private String physPortSide;

  public static final String JSON_PROPERTY_PORT_FUNCTION = "portFunction";
  private String portFunction;

  public static final String JSON_PROPERTY_IMA = "ima";
  private Boolean ima;

  public static final String JSON_PROPERTY_ACTIVE_UNTIL = "activeUntil";
  private DateTime activeUntil;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC = "createLinkCustomIpaccessSvc";
  private CreateSupportType1LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_C_VLAN = "createLinkCustomSvidCVlan";
  private CreateSupportType1LogicalPortCreateLinkCustomSvidCVlanRequestData createLinkCustomSvidCVlan;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_S_VLAN = "createLinkCustomSvidSVlan";
  private CreateSupportType1LogicalPortCreateLinkCustomSvidSVlanRequestData createLinkCustomSvidSVlan;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_VLAN = "createLinkCustomSvidVlan";
  private CreateSupportType1LogicalPortCreateLinkCustomSvidVlanRequestData createLinkCustomSvidVlan;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT = "createLinkCustomTcoInterconnect";
  private CreateSupportType1LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect;

  public static final String JSON_PROPERTY_CREATE_LINK_DEVICE_ALL = "createLinkDeviceAll";
  private CreateSupportType1LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll;

  public CreateSupportType1LogicalPortRequestData() {
  }

  public CreateSupportType1LogicalPortRequestData rxBlockFlag(Boolean rxBlockFlag) {
    
    this.rxBlockFlag = rxBlockFlag;
    return this;
  }

   /**
   * Get rxBlockFlag
   * @return rxBlockFlag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRxBlockFlag() {
    return rxBlockFlag;
  }


  @JsonProperty(JSON_PROPERTY_RX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRxBlockFlag(Boolean rxBlockFlag) {
    this.rxBlockFlag = rxBlockFlag;
  }


  public CreateSupportType1LogicalPortRequestData sourceSystem(String sourceSystem) {
    
    this.sourceSystem = sourceSystem;
    return this;
  }

   /**
   * Get sourceSystem
   * @return sourceSystem
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceSystem() {
    return sourceSystem;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceSystem(String sourceSystem) {
    this.sourceSystem = sourceSystem;
  }


  public CreateSupportType1LogicalPortRequestData cDataSourceId(String cDataSourceId) {
    
    this.cDataSourceId = cDataSourceId;
    return this;
  }

   /**
   * Get cDataSourceId
   * @return cDataSourceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSourceId() {
    return cDataSourceId;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSourceId(String cDataSourceId) {
    this.cDataSourceId = cDataSourceId;
  }


  public CreateSupportType1LogicalPortRequestData physPort2(BigDecimal physPort2) {
    
    this.physPort2 = physPort2;
    return this;
  }

   /**
   * Get physPort2
   * @return physPort2
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYS_PORT2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPhysPort2() {
    return physPort2;
  }


  @JsonProperty(JSON_PROPERTY_PHYS_PORT2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysPort2(BigDecimal physPort2) {
    this.physPort2 = physPort2;
  }


  public CreateSupportType1LogicalPortRequestData portStatus(String portStatus) {
    
    this.portStatus = portStatus;
    return this;
  }

   /**
   * Get portStatus
   * @return portStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortStatus() {
    return portStatus;
  }


  @JsonProperty(JSON_PROPERTY_PORT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortStatus(String portStatus) {
    this.portStatus = portStatus;
  }


  public CreateSupportType1LogicalPortRequestData txBlockFlag(Boolean txBlockFlag) {
    
    this.txBlockFlag = txBlockFlag;
    return this;
  }

   /**
   * Get txBlockFlag
   * @return txBlockFlag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTxBlockFlag() {
    return txBlockFlag;
  }


  @JsonProperty(JSON_PROPERTY_TX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTxBlockFlag(Boolean txBlockFlag) {
    this.txBlockFlag = txBlockFlag;
  }


  public CreateSupportType1LogicalPortRequestData portNo(BigDecimal portNo) {
    
    this.portNo = portNo;
    return this;
  }

   /**
   * Get portNo
   * @return portNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPortNo() {
    return portNo;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNo(BigDecimal portNo) {
    this.portNo = portNo;
  }


  public CreateSupportType1LogicalPortRequestData atm(Boolean atm) {
    
    this.atm = atm;
    return this;
  }

   /**
   * Get atm
   * @return atm
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAtm() {
    return atm;
  }


  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAtm(Boolean atm) {
    this.atm = atm;
  }


  public CreateSupportType1LogicalPortRequestData portNameOrg(String portNameOrg) {
    
    this.portNameOrg = portNameOrg;
    return this;
  }

   /**
   * Get portNameOrg
   * @return portNameOrg
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NAME_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortNameOrg() {
    return portNameOrg;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NAME_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNameOrg(String portNameOrg) {
    this.portNameOrg = portNameOrg;
  }


  public CreateSupportType1LogicalPortRequestData signalRate(String signalRate) {
    
    this.signalRate = signalRate;
    return this;
  }

   /**
   * Get signalRate
   * @return signalRate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNAL_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignalRate() {
    return signalRate;
  }


  @JsonProperty(JSON_PROPERTY_SIGNAL_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignalRate(String signalRate) {
    this.signalRate = signalRate;
  }


  public CreateSupportType1LogicalPortRequestData activeFrom(DateTime activeFrom) {
    
    this.activeFrom = activeFrom;
    return this;
  }

   /**
   * Get activeFrom
   * @return activeFrom
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateTime getActiveFrom() {
    return activeFrom;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveFrom(DateTime activeFrom) {
    this.activeFrom = activeFrom;
  }


  public CreateSupportType1LogicalPortRequestData nominalUtilization(BigDecimal nominalUtilization) {
    
    this.nominalUtilization = nominalUtilization;
    return this;
  }

   /**
   * Get nominalUtilization
   * @return nominalUtilization
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOMINAL_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNominalUtilization() {
    return nominalUtilization;
  }


  @JsonProperty(JSON_PROPERTY_NOMINAL_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNominalUtilization(BigDecimal nominalUtilization) {
    this.nominalUtilization = nominalUtilization;
  }


  public CreateSupportType1LogicalPortRequestData cDataSourceDeleted(String cDataSourceDeleted) {
    
    this.cDataSourceDeleted = cDataSourceDeleted;
    return this;
  }

   /**
   * Get cDataSourceDeleted
   * @return cDataSourceDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSourceDeleted() {
    return cDataSourceDeleted;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSourceDeleted(String cDataSourceDeleted) {
    this.cDataSourceDeleted = cDataSourceDeleted;
  }


  public CreateSupportType1LogicalPortRequestData cServiceSide(String cServiceSide) {
    
    this.cServiceSide = cServiceSide;
    return this;
  }

   /**
   * Get cServiceSide
   * @return cServiceSide
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_SERVICE_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcServiceSide() {
    return cServiceSide;
  }


  @JsonProperty(JSON_PROPERTY_C_SERVICE_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcServiceSide(String cServiceSide) {
    this.cServiceSide = cServiceSide;
  }


  public CreateSupportType1LogicalPortRequestData overloadWarning(String overloadWarning) {
    
    this.overloadWarning = overloadWarning;
    return this;
  }

   /**
   * Get overloadWarning
   * @return overloadWarning
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERLOAD_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOverloadWarning() {
    return overloadWarning;
  }


  @JsonProperty(JSON_PROPERTY_OVERLOAD_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverloadWarning(String overloadWarning) {
    this.overloadWarning = overloadWarning;
  }


  public CreateSupportType1LogicalPortRequestData bandwidth(BigDecimal bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidth(BigDecimal bandwidth) {
    this.bandwidth = bandwidth;
  }


  public CreateSupportType1LogicalPortRequestData contextId(String contextId) {
    
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContextId() {
    return contextId;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextId(String contextId) {
    this.contextId = contextId;
  }


  public CreateSupportType1LogicalPortRequestData portCategory(String portCategory) {
    
    this.portCategory = portCategory;
    return this;
  }

   /**
   * Get portCategory
   * @return portCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortCategory() {
    return portCategory;
  }


  @JsonProperty(JSON_PROPERTY_PORT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortCategory(String portCategory) {
    this.portCategory = portCategory;
  }


  public CreateSupportType1LogicalPortRequestData physPort2Side(String physPort2Side) {
    
    this.physPort2Side = physPort2Side;
    return this;
  }

   /**
   * Get physPort2Side
   * @return physPort2Side
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYS_PORT2_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhysPort2Side() {
    return physPort2Side;
  }


  @JsonProperty(JSON_PROPERTY_PHYS_PORT2_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysPort2Side(String physPort2Side) {
    this.physPort2Side = physPort2Side;
  }


  public CreateSupportType1LogicalPortRequestData portType(String portType) {
    
    this.portType = portType;
    return this;
  }

   /**
   * Get portType
   * @return portType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortType() {
    return portType;
  }


  @JsonProperty(JSON_PROPERTY_PORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortType(String portType) {
    this.portType = portType;
  }


  public CreateSupportType1LogicalPortRequestData cDataSource(String cDataSource) {
    
    this.cDataSource = cDataSource;
    return this;
  }

   /**
   * Get cDataSource
   * @return cDataSource
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSource() {
    return cDataSource;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSource(String cDataSource) {
    this.cDataSource = cDataSource;
  }


  public CreateSupportType1LogicalPortRequestData physPort(BigDecimal physPort) {
    
    this.physPort = physPort;
    return this;
  }

   /**
   * Get physPort
   * @return physPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPhysPort() {
    return physPort;
  }


  @JsonProperty(JSON_PROPERTY_PHYS_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysPort(BigDecimal physPort) {
    this.physPort = physPort;
  }


  public CreateSupportType1LogicalPortRequestData physPortSide(String physPortSide) {
    
    this.physPortSide = physPortSide;
    return this;
  }

   /**
   * Get physPortSide
   * @return physPortSide
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHYS_PORT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhysPortSide() {
    return physPortSide;
  }


  @JsonProperty(JSON_PROPERTY_PHYS_PORT_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhysPortSide(String physPortSide) {
    this.physPortSide = physPortSide;
  }


  public CreateSupportType1LogicalPortRequestData portFunction(String portFunction) {
    
    this.portFunction = portFunction;
    return this;
  }

   /**
   * Get portFunction
   * @return portFunction
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortFunction() {
    return portFunction;
  }


  @JsonProperty(JSON_PROPERTY_PORT_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortFunction(String portFunction) {
    this.portFunction = portFunction;
  }


  public CreateSupportType1LogicalPortRequestData ima(Boolean ima) {
    
    this.ima = ima;
    return this;
  }

   /**
   * Get ima
   * @return ima
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIma() {
    return ima;
  }


  @JsonProperty(JSON_PROPERTY_IMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIma(Boolean ima) {
    this.ima = ima;
  }


  public CreateSupportType1LogicalPortRequestData activeUntil(DateTime activeUntil) {
    
    this.activeUntil = activeUntil;
    return this;
  }

   /**
   * Get activeUntil
   * @return activeUntil
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateTime getActiveUntil() {
    return activeUntil;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveUntil(DateTime activeUntil) {
    this.activeUntil = activeUntil;
  }


  public CreateSupportType1LogicalPortRequestData createLinkCustomIpaccessSvc(CreateSupportType1LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc) {
    
    this.createLinkCustomIpaccessSvc = createLinkCustomIpaccessSvc;
    return this;
  }

   /**
   * Get createLinkCustomIpaccessSvc
   * @return createLinkCustomIpaccessSvc
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType1LogicalPortCreateLinkCustomIpaccessSvcRequestData getCreateLinkCustomIpaccessSvc() {
    return createLinkCustomIpaccessSvc;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomIpaccessSvc(CreateSupportType1LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc) {
    this.createLinkCustomIpaccessSvc = createLinkCustomIpaccessSvc;
  }


  public CreateSupportType1LogicalPortRequestData createLinkCustomSvidCVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidCVlanRequestData createLinkCustomSvidCVlan) {
    
    this.createLinkCustomSvidCVlan = createLinkCustomSvidCVlan;
    return this;
  }

   /**
   * Get createLinkCustomSvidCVlan
   * @return createLinkCustomSvidCVlan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_C_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType1LogicalPortCreateLinkCustomSvidCVlanRequestData getCreateLinkCustomSvidCVlan() {
    return createLinkCustomSvidCVlan;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_C_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomSvidCVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidCVlanRequestData createLinkCustomSvidCVlan) {
    this.createLinkCustomSvidCVlan = createLinkCustomSvidCVlan;
  }


  public CreateSupportType1LogicalPortRequestData createLinkCustomSvidSVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidSVlanRequestData createLinkCustomSvidSVlan) {
    
    this.createLinkCustomSvidSVlan = createLinkCustomSvidSVlan;
    return this;
  }

   /**
   * Get createLinkCustomSvidSVlan
   * @return createLinkCustomSvidSVlan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_S_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType1LogicalPortCreateLinkCustomSvidSVlanRequestData getCreateLinkCustomSvidSVlan() {
    return createLinkCustomSvidSVlan;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_S_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomSvidSVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidSVlanRequestData createLinkCustomSvidSVlan) {
    this.createLinkCustomSvidSVlan = createLinkCustomSvidSVlan;
  }


  public CreateSupportType1LogicalPortRequestData createLinkCustomSvidVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidVlanRequestData createLinkCustomSvidVlan) {
    
    this.createLinkCustomSvidVlan = createLinkCustomSvidVlan;
    return this;
  }

   /**
   * Get createLinkCustomSvidVlan
   * @return createLinkCustomSvidVlan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType1LogicalPortCreateLinkCustomSvidVlanRequestData getCreateLinkCustomSvidVlan() {
    return createLinkCustomSvidVlan;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID_VLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomSvidVlan(CreateSupportType1LogicalPortCreateLinkCustomSvidVlanRequestData createLinkCustomSvidVlan) {
    this.createLinkCustomSvidVlan = createLinkCustomSvidVlan;
  }


  public CreateSupportType1LogicalPortRequestData createLinkCustomTcoInterconnect(CreateSupportType1LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect) {
    
    this.createLinkCustomTcoInterconnect = createLinkCustomTcoInterconnect;
    return this;
  }

   /**
   * Get createLinkCustomTcoInterconnect
   * @return createLinkCustomTcoInterconnect
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType1LogicalPortCreateLinkCustomTcoInterconnectRequestData getCreateLinkCustomTcoInterconnect() {
    return createLinkCustomTcoInterconnect;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomTcoInterconnect(CreateSupportType1LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect) {
    this.createLinkCustomTcoInterconnect = createLinkCustomTcoInterconnect;
  }


  public CreateSupportType1LogicalPortRequestData createLinkDeviceAll(CreateSupportType1LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll) {
    
    this.createLinkDeviceAll = createLinkDeviceAll;
    return this;
  }

   /**
   * Get createLinkDeviceAll
   * @return createLinkDeviceAll
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_DEVICE_ALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateSupportType1LogicalPortCreateLinkDeviceAllRequestData getCreateLinkDeviceAll() {
    return createLinkDeviceAll;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_DEVICE_ALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreateLinkDeviceAll(CreateSupportType1LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll) {
    this.createLinkDeviceAll = createLinkDeviceAll;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSupportType1LogicalPortRequestData createSupportType1LogicalPortRequestData = (CreateSupportType1LogicalPortRequestData) o;
    return Objects.equals(this.rxBlockFlag, createSupportType1LogicalPortRequestData.rxBlockFlag) &&
        Objects.equals(this.sourceSystem, createSupportType1LogicalPortRequestData.sourceSystem) &&
        Objects.equals(this.cDataSourceId, createSupportType1LogicalPortRequestData.cDataSourceId) &&
        Objects.equals(this.physPort2, createSupportType1LogicalPortRequestData.physPort2) &&
        Objects.equals(this.portStatus, createSupportType1LogicalPortRequestData.portStatus) &&
        Objects.equals(this.txBlockFlag, createSupportType1LogicalPortRequestData.txBlockFlag) &&
        Objects.equals(this.portNo, createSupportType1LogicalPortRequestData.portNo) &&
        Objects.equals(this.atm, createSupportType1LogicalPortRequestData.atm) &&
        Objects.equals(this.portNameOrg, createSupportType1LogicalPortRequestData.portNameOrg) &&
        Objects.equals(this.signalRate, createSupportType1LogicalPortRequestData.signalRate) &&
        Objects.equals(this.activeFrom, createSupportType1LogicalPortRequestData.activeFrom) &&
        Objects.equals(this.nominalUtilization, createSupportType1LogicalPortRequestData.nominalUtilization) &&
        Objects.equals(this.cDataSourceDeleted, createSupportType1LogicalPortRequestData.cDataSourceDeleted) &&
        Objects.equals(this.cServiceSide, createSupportType1LogicalPortRequestData.cServiceSide) &&
        Objects.equals(this.overloadWarning, createSupportType1LogicalPortRequestData.overloadWarning) &&
        Objects.equals(this.bandwidth, createSupportType1LogicalPortRequestData.bandwidth) &&
        Objects.equals(this.contextId, createSupportType1LogicalPortRequestData.contextId) &&
        Objects.equals(this.portCategory, createSupportType1LogicalPortRequestData.portCategory) &&
        Objects.equals(this.physPort2Side, createSupportType1LogicalPortRequestData.physPort2Side) &&
        Objects.equals(this.portType, createSupportType1LogicalPortRequestData.portType) &&
        Objects.equals(this.cDataSource, createSupportType1LogicalPortRequestData.cDataSource) &&
        Objects.equals(this.physPort, createSupportType1LogicalPortRequestData.physPort) &&
        Objects.equals(this.physPortSide, createSupportType1LogicalPortRequestData.physPortSide) &&
        Objects.equals(this.portFunction, createSupportType1LogicalPortRequestData.portFunction) &&
        Objects.equals(this.ima, createSupportType1LogicalPortRequestData.ima) &&
        Objects.equals(this.activeUntil, createSupportType1LogicalPortRequestData.activeUntil) &&
        Objects.equals(this.createLinkCustomIpaccessSvc, createSupportType1LogicalPortRequestData.createLinkCustomIpaccessSvc) &&
        Objects.equals(this.createLinkCustomSvidCVlan, createSupportType1LogicalPortRequestData.createLinkCustomSvidCVlan) &&
        Objects.equals(this.createLinkCustomSvidSVlan, createSupportType1LogicalPortRequestData.createLinkCustomSvidSVlan) &&
        Objects.equals(this.createLinkCustomSvidVlan, createSupportType1LogicalPortRequestData.createLinkCustomSvidVlan) &&
        Objects.equals(this.createLinkCustomTcoInterconnect, createSupportType1LogicalPortRequestData.createLinkCustomTcoInterconnect) &&
        Objects.equals(this.createLinkDeviceAll, createSupportType1LogicalPortRequestData.createLinkDeviceAll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rxBlockFlag, sourceSystem, cDataSourceId, physPort2, portStatus, txBlockFlag, portNo, atm, portNameOrg, signalRate, activeFrom, nominalUtilization, cDataSourceDeleted, cServiceSide, overloadWarning, bandwidth, contextId, portCategory, physPort2Side, portType, cDataSource, physPort, physPortSide, portFunction, ima, activeUntil, createLinkCustomIpaccessSvc, createLinkCustomSvidCVlan, createLinkCustomSvidSVlan, createLinkCustomSvidVlan, createLinkCustomTcoInterconnect, createLinkDeviceAll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSupportType1LogicalPortRequestData {\n");
    sb.append("    rxBlockFlag: ").append(toIndentedString(rxBlockFlag)).append("\n");
    sb.append("    sourceSystem: ").append(toIndentedString(sourceSystem)).append("\n");
    sb.append("    cDataSourceId: ").append(toIndentedString(cDataSourceId)).append("\n");
    sb.append("    physPort2: ").append(toIndentedString(physPort2)).append("\n");
    sb.append("    portStatus: ").append(toIndentedString(portStatus)).append("\n");
    sb.append("    txBlockFlag: ").append(toIndentedString(txBlockFlag)).append("\n");
    sb.append("    portNo: ").append(toIndentedString(portNo)).append("\n");
    sb.append("    atm: ").append(toIndentedString(atm)).append("\n");
    sb.append("    portNameOrg: ").append(toIndentedString(portNameOrg)).append("\n");
    sb.append("    signalRate: ").append(toIndentedString(signalRate)).append("\n");
    sb.append("    activeFrom: ").append(toIndentedString(activeFrom)).append("\n");
    sb.append("    nominalUtilization: ").append(toIndentedString(nominalUtilization)).append("\n");
    sb.append("    cDataSourceDeleted: ").append(toIndentedString(cDataSourceDeleted)).append("\n");
    sb.append("    cServiceSide: ").append(toIndentedString(cServiceSide)).append("\n");
    sb.append("    overloadWarning: ").append(toIndentedString(overloadWarning)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    portCategory: ").append(toIndentedString(portCategory)).append("\n");
    sb.append("    physPort2Side: ").append(toIndentedString(physPort2Side)).append("\n");
    sb.append("    portType: ").append(toIndentedString(portType)).append("\n");
    sb.append("    cDataSource: ").append(toIndentedString(cDataSource)).append("\n");
    sb.append("    physPort: ").append(toIndentedString(physPort)).append("\n");
    sb.append("    physPortSide: ").append(toIndentedString(physPortSide)).append("\n");
    sb.append("    portFunction: ").append(toIndentedString(portFunction)).append("\n");
    sb.append("    ima: ").append(toIndentedString(ima)).append("\n");
    sb.append("    activeUntil: ").append(toIndentedString(activeUntil)).append("\n");
    sb.append("    createLinkCustomIpaccessSvc: ").append(toIndentedString(createLinkCustomIpaccessSvc)).append("\n");
    sb.append("    createLinkCustomSvidCVlan: ").append(toIndentedString(createLinkCustomSvidCVlan)).append("\n");
    sb.append("    createLinkCustomSvidSVlan: ").append(toIndentedString(createLinkCustomSvidSVlan)).append("\n");
    sb.append("    createLinkCustomSvidVlan: ").append(toIndentedString(createLinkCustomSvidVlan)).append("\n");
    sb.append("    createLinkCustomTcoInterconnect: ").append(toIndentedString(createLinkCustomTcoInterconnect)).append("\n");
    sb.append("    createLinkDeviceAll: ").append(toIndentedString(createLinkDeviceAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

