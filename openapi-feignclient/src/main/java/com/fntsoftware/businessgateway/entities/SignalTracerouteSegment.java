/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.SignalTracealternativeConnection;
import com.fntsoftware.businessgateway.entities.SignalTraceconnection;
import com.fntsoftware.businessgateway.entities.SignalTracedevice;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SignalTracerouteSegment
 */
@JsonPropertyOrder({
  SignalTracerouteSegment.JSON_PROPERTY_ROUTE_SEGMENT_NUMBER,
  SignalTracerouteSegment.JSON_PROPERTY_ALTERNATIVE_CONNECTIONS,
  SignalTracerouteSegment.JSON_PROPERTY_CONNECTION,
  SignalTracerouteSegment.JSON_PROPERTY_TARGET_DEVICE,
  SignalTracerouteSegment.JSON_PROPERTY_PREDECESSOR,
  SignalTracerouteSegment.JSON_PROPERTY_SOURCE_DEVICE
})
@JsonTypeName("signalTracerouteSegment")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class SignalTracerouteSegment {
  public static final String JSON_PROPERTY_ROUTE_SEGMENT_NUMBER = "routeSegmentNumber";
  private BigDecimal routeSegmentNumber;

  public static final String JSON_PROPERTY_ALTERNATIVE_CONNECTIONS = "alternativeConnections";
  private List<SignalTracealternativeConnection> alternativeConnections;

  public static final String JSON_PROPERTY_CONNECTION = "connection";
  private SignalTraceconnection connection;

  public static final String JSON_PROPERTY_TARGET_DEVICE = "targetDevice";
  private SignalTracedevice targetDevice;

  public static final String JSON_PROPERTY_PREDECESSOR = "predecessor";
  private BigDecimal predecessor;

  public static final String JSON_PROPERTY_SOURCE_DEVICE = "sourceDevice";
  private SignalTracedevice sourceDevice;

  public SignalTracerouteSegment() {
  }

  public SignalTracerouteSegment routeSegmentNumber(BigDecimal routeSegmentNumber) {
    
    this.routeSegmentNumber = routeSegmentNumber;
    return this;
  }

   /**
   * Get routeSegmentNumber
   * @return routeSegmentNumber
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROUTE_SEGMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRouteSegmentNumber() {
    return routeSegmentNumber;
  }


  @JsonProperty(JSON_PROPERTY_ROUTE_SEGMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRouteSegmentNumber(BigDecimal routeSegmentNumber) {
    this.routeSegmentNumber = routeSegmentNumber;
  }


  public SignalTracerouteSegment alternativeConnections(List<SignalTracealternativeConnection> alternativeConnections) {
    
    this.alternativeConnections = alternativeConnections;
    return this;
  }

  public SignalTracerouteSegment addAlternativeConnectionsItem(SignalTracealternativeConnection alternativeConnectionsItem) {
    if (this.alternativeConnections == null) {
      this.alternativeConnections = new ArrayList<>();
    }
    this.alternativeConnections.add(alternativeConnectionsItem);
    return this;
  }

   /**
   * Get alternativeConnections
   * @return alternativeConnections
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALTERNATIVE_CONNECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SignalTracealternativeConnection> getAlternativeConnections() {
    return alternativeConnections;
  }


  @JsonProperty(JSON_PROPERTY_ALTERNATIVE_CONNECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlternativeConnections(List<SignalTracealternativeConnection> alternativeConnections) {
    this.alternativeConnections = alternativeConnections;
  }


  public SignalTracerouteSegment connection(SignalTraceconnection connection) {
    
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceconnection getConnection() {
    return connection;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnection(SignalTraceconnection connection) {
    this.connection = connection;
  }


  public SignalTracerouteSegment targetDevice(SignalTracedevice targetDevice) {
    
    this.targetDevice = targetDevice;
    return this;
  }

   /**
   * Get targetDevice
   * @return targetDevice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTracedevice getTargetDevice() {
    return targetDevice;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetDevice(SignalTracedevice targetDevice) {
    this.targetDevice = targetDevice;
  }


  public SignalTracerouteSegment predecessor(BigDecimal predecessor) {
    
    this.predecessor = predecessor;
    return this;
  }

   /**
   * Get predecessor
   * @return predecessor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREDECESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPredecessor() {
    return predecessor;
  }


  @JsonProperty(JSON_PROPERTY_PREDECESSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPredecessor(BigDecimal predecessor) {
    this.predecessor = predecessor;
  }


  public SignalTracerouteSegment sourceDevice(SignalTracedevice sourceDevice) {
    
    this.sourceDevice = sourceDevice;
    return this;
  }

   /**
   * Get sourceDevice
   * @return sourceDevice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTracedevice getSourceDevice() {
    return sourceDevice;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_DEVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceDevice(SignalTracedevice sourceDevice) {
    this.sourceDevice = sourceDevice;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalTracerouteSegment signalTracerouteSegment = (SignalTracerouteSegment) o;
    return Objects.equals(this.routeSegmentNumber, signalTracerouteSegment.routeSegmentNumber) &&
        Objects.equals(this.alternativeConnections, signalTracerouteSegment.alternativeConnections) &&
        Objects.equals(this.connection, signalTracerouteSegment.connection) &&
        Objects.equals(this.targetDevice, signalTracerouteSegment.targetDevice) &&
        Objects.equals(this.predecessor, signalTracerouteSegment.predecessor) &&
        Objects.equals(this.sourceDevice, signalTracerouteSegment.sourceDevice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(routeSegmentNumber, alternativeConnections, connection, targetDevice, predecessor, sourceDevice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalTracerouteSegment {\n");
    sb.append("    routeSegmentNumber: ").append(toIndentedString(routeSegmentNumber)).append("\n");
    sb.append("    alternativeConnections: ").append(toIndentedString(alternativeConnections)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    targetDevice: ").append(toIndentedString(targetDevice)).append("\n");
    sb.append("    predecessor: ").append(toIndentedString(predecessor)).append("\n");
    sb.append("    sourceDevice: ").append(toIndentedString(sourceDevice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

