/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * NodeTypeshaft
 */
@JsonPropertyOrder({
  NodeTypeshaft.JSON_PROPERTY_NOMENCLATURE,
  NodeTypeshaft.JSON_PROPERTY_SIDE,
  NodeTypeshaft.JSON_PROPERTY_GRID_SIZE_X,
  NodeTypeshaft.JSON_PROPERTY_GRID_SIZE_Y,
  NodeTypeshaft.JSON_PROPERTY_BASING_POINT,
  NodeTypeshaft.JSON_PROPERTY_ACTIVE,
  NodeTypeshaft.JSON_PROPERTY_SIDE_NAME
})
@JsonTypeName("nodeTypeshaft")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class NodeTypeshaft {
  public static final String JSON_PROPERTY_NOMENCLATURE = "nomenclature";
  private String nomenclature;

  public static final String JSON_PROPERTY_SIDE = "side";
  private BigDecimal side;

  public static final String JSON_PROPERTY_GRID_SIZE_X = "gridSizeX";
  private BigDecimal gridSizeX;

  public static final String JSON_PROPERTY_GRID_SIZE_Y = "gridSizeY";
  private BigDecimal gridSizeY;

  public static final String JSON_PROPERTY_BASING_POINT = "basingPoint";
  private String basingPoint;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private String active;

  public static final String JSON_PROPERTY_SIDE_NAME = "sideName";
  private String sideName;

  public NodeTypeshaft() {
  }

  public NodeTypeshaft nomenclature(String nomenclature) {
    
    this.nomenclature = nomenclature;
    return this;
  }

   /**
   * Get nomenclature
   * @return nomenclature
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNomenclature() {
    return nomenclature;
  }


  @JsonProperty(JSON_PROPERTY_NOMENCLATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNomenclature(String nomenclature) {
    this.nomenclature = nomenclature;
  }


  public NodeTypeshaft side(BigDecimal side) {
    
    this.side = side;
    return this;
  }

   /**
   * Get side
   * @return side
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSide() {
    return side;
  }


  @JsonProperty(JSON_PROPERTY_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSide(BigDecimal side) {
    this.side = side;
  }


  public NodeTypeshaft gridSizeX(BigDecimal gridSizeX) {
    
    this.gridSizeX = gridSizeX;
    return this;
  }

   /**
   * Get gridSizeX
   * @return gridSizeX
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRID_SIZE_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGridSizeX() {
    return gridSizeX;
  }


  @JsonProperty(JSON_PROPERTY_GRID_SIZE_X)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGridSizeX(BigDecimal gridSizeX) {
    this.gridSizeX = gridSizeX;
  }


  public NodeTypeshaft gridSizeY(BigDecimal gridSizeY) {
    
    this.gridSizeY = gridSizeY;
    return this;
  }

   /**
   * Get gridSizeY
   * @return gridSizeY
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRID_SIZE_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGridSizeY() {
    return gridSizeY;
  }


  @JsonProperty(JSON_PROPERTY_GRID_SIZE_Y)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGridSizeY(BigDecimal gridSizeY) {
    this.gridSizeY = gridSizeY;
  }


  public NodeTypeshaft basingPoint(String basingPoint) {
    
    this.basingPoint = basingPoint;
    return this;
  }

   /**
   * Get basingPoint
   * @return basingPoint
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASING_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBasingPoint() {
    return basingPoint;
  }


  @JsonProperty(JSON_PROPERTY_BASING_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBasingPoint(String basingPoint) {
    this.basingPoint = basingPoint;
  }


  public NodeTypeshaft active(String active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(String active) {
    this.active = active;
  }


  public NodeTypeshaft sideName(String sideName) {
    
    this.sideName = sideName;
    return this;
  }

   /**
   * Get sideName
   * @return sideName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIDE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSideName() {
    return sideName;
  }


  @JsonProperty(JSON_PROPERTY_SIDE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSideName(String sideName) {
    this.sideName = sideName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeTypeshaft nodeTypeshaft = (NodeTypeshaft) o;
    return Objects.equals(this.nomenclature, nodeTypeshaft.nomenclature) &&
        Objects.equals(this.side, nodeTypeshaft.side) &&
        Objects.equals(this.gridSizeX, nodeTypeshaft.gridSizeX) &&
        Objects.equals(this.gridSizeY, nodeTypeshaft.gridSizeY) &&
        Objects.equals(this.basingPoint, nodeTypeshaft.basingPoint) &&
        Objects.equals(this.active, nodeTypeshaft.active) &&
        Objects.equals(this.sideName, nodeTypeshaft.sideName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomenclature, side, gridSizeX, gridSizeY, basingPoint, active, sideName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeTypeshaft {\n");
    sb.append("    nomenclature: ").append(toIndentedString(nomenclature)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    gridSizeX: ").append(toIndentedString(gridSizeX)).append("\n");
    sb.append("    gridSizeY: ").append(toIndentedString(gridSizeY)).append("\n");
    sb.append("    basingPoint: ").append(toIndentedString(basingPoint)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    sideName: ").append(toIndentedString(sideName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

