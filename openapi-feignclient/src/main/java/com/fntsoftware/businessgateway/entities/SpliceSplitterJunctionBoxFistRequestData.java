/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.SpliceSplitterJunctionBoxFistSelectInputDataCableRequestData;
import com.fntsoftware.businessgateway.entities.SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SpliceSplitterJunctionBoxFistRequestData
 */
@JsonPropertyOrder({
  SpliceSplitterJunctionBoxFistRequestData.JSON_PROPERTY_SPLITTER_ELID,
  SpliceSplitterJunctionBoxFistRequestData.JSON_PROPERTY_SELECT_INPUT_DATA_CABLE,
  SpliceSplitterJunctionBoxFistRequestData.JSON_PROPERTY_SELECT_OUTPUT_DATA_CABLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class SpliceSplitterJunctionBoxFistRequestData {
  public static final String JSON_PROPERTY_SPLITTER_ELID = "splitterElid";
  private String splitterElid;

  public static final String JSON_PROPERTY_SELECT_INPUT_DATA_CABLE = "selectInputDataCable";
  private SpliceSplitterJunctionBoxFistSelectInputDataCableRequestData selectInputDataCable;

  public static final String JSON_PROPERTY_SELECT_OUTPUT_DATA_CABLE = "selectOutputDataCable";
  private List<SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData> selectOutputDataCable;

  public SpliceSplitterJunctionBoxFistRequestData() {
  }

  public SpliceSplitterJunctionBoxFistRequestData splitterElid(String splitterElid) {
    
    this.splitterElid = splitterElid;
    return this;
  }

   /**
   * Get splitterElid
   * @return splitterElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPLITTER_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSplitterElid() {
    return splitterElid;
  }


  @JsonProperty(JSON_PROPERTY_SPLITTER_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitterElid(String splitterElid) {
    this.splitterElid = splitterElid;
  }


  public SpliceSplitterJunctionBoxFistRequestData selectInputDataCable(SpliceSplitterJunctionBoxFistSelectInputDataCableRequestData selectInputDataCable) {
    
    this.selectInputDataCable = selectInputDataCable;
    return this;
  }

   /**
   * Get selectInputDataCable
   * @return selectInputDataCable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECT_INPUT_DATA_CABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SpliceSplitterJunctionBoxFistSelectInputDataCableRequestData getSelectInputDataCable() {
    return selectInputDataCable;
  }


  @JsonProperty(JSON_PROPERTY_SELECT_INPUT_DATA_CABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectInputDataCable(SpliceSplitterJunctionBoxFistSelectInputDataCableRequestData selectInputDataCable) {
    this.selectInputDataCable = selectInputDataCable;
  }


  public SpliceSplitterJunctionBoxFistRequestData selectOutputDataCable(List<SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData> selectOutputDataCable) {
    
    this.selectOutputDataCable = selectOutputDataCable;
    return this;
  }

  public SpliceSplitterJunctionBoxFistRequestData addSelectOutputDataCableItem(SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData selectOutputDataCableItem) {
    if (this.selectOutputDataCable == null) {
      this.selectOutputDataCable = new ArrayList<>();
    }
    this.selectOutputDataCable.add(selectOutputDataCableItem);
    return this;
  }

   /**
   * Get selectOutputDataCable
   * @return selectOutputDataCable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECT_OUTPUT_DATA_CABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData> getSelectOutputDataCable() {
    return selectOutputDataCable;
  }


  @JsonProperty(JSON_PROPERTY_SELECT_OUTPUT_DATA_CABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectOutputDataCable(List<SpliceSplitterJunctionBoxFistSelectOutputDataCableRequestData> selectOutputDataCable) {
    this.selectOutputDataCable = selectOutputDataCable;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpliceSplitterJunctionBoxFistRequestData spliceSplitterJunctionBoxFistRequestData = (SpliceSplitterJunctionBoxFistRequestData) o;
    return Objects.equals(this.splitterElid, spliceSplitterJunctionBoxFistRequestData.splitterElid) &&
        Objects.equals(this.selectInputDataCable, spliceSplitterJunctionBoxFistRequestData.selectInputDataCable) &&
        Objects.equals(this.selectOutputDataCable, spliceSplitterJunctionBoxFistRequestData.selectOutputDataCable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(splitterElid, selectInputDataCable, selectOutputDataCable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpliceSplitterJunctionBoxFistRequestData {\n");
    sb.append("    splitterElid: ").append(toIndentedString(splitterElid)).append("\n");
    sb.append("    selectInputDataCable: ").append(toIndentedString(selectInputDataCable)).append("\n");
    sb.append("    selectOutputDataCable: ").append(toIndentedString(selectOutputDataCable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

