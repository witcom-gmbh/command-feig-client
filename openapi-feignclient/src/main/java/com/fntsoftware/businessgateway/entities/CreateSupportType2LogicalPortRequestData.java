/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.CreateSupportType2LogicalPortCreateLinkCustomIpaccessSvcRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType2LogicalPortCreateLinkCustomSvidRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType2LogicalPortCreateLinkCustomTcoInterconnectRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType2LogicalPortCreateLinkDeviceAllRequestData;
import com.fntsoftware.businessgateway.entities.CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateSupportType2LogicalPortRequestData
 */
@JsonPropertyOrder({
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_SOURCE_ID,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_RX_BLOCK_FLAG,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_SOURCE_SYSTEM,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_LOCK_SUB_PORT,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE_ID,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_STATUS,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_TX_BLOCK_FLAG,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_OWNER_SYSTEM,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_NO,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_ATM,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_NAME_ORG,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_SIGNAL_RATE,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_ACTIVE_FROM,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_NOMINAL_UTILIZATION,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE_DELETED,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_C_SERVICE_SIDE,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_OVERLOAD_WARNING,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_BANDWIDTH,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CONTEXT_ID,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_CATEGORY,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_TYPE,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_C_DATA_SOURCE,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_PORT_FUNCTION,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_IMA,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_ACTIVE_UNTIL,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_DEVICE_ALL,
  CreateSupportType2LogicalPortRequestData.JSON_PROPERTY_CREATE_LINK_PHYSICAL_PORT_DATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class CreateSupportType2LogicalPortRequestData {
  public static final String JSON_PROPERTY_SOURCE_ID = "sourceId";
  private String sourceId;

  public static final String JSON_PROPERTY_RX_BLOCK_FLAG = "rxBlockFlag";
  private Boolean rxBlockFlag;

  public static final String JSON_PROPERTY_SOURCE_SYSTEM = "sourceSystem";
  private String sourceSystem;

  public static final String JSON_PROPERTY_LOCK_SUB_PORT = "lockSubPort";
  private Boolean lockSubPort;

  public static final String JSON_PROPERTY_C_DATA_SOURCE_ID = "cDataSourceId";
  private String cDataSourceId;

  public static final String JSON_PROPERTY_PORT_STATUS = "portStatus";
  private String portStatus;

  public static final String JSON_PROPERTY_TX_BLOCK_FLAG = "txBlockFlag";
  private Boolean txBlockFlag;

  public static final String JSON_PROPERTY_OWNER_SYSTEM = "ownerSystem";
  private String ownerSystem;

  public static final String JSON_PROPERTY_PORT_NO = "portNo";
  private BigDecimal portNo;

  public static final String JSON_PROPERTY_ATM = "atm";
  private Boolean atm;

  public static final String JSON_PROPERTY_PORT_NAME_ORG = "portNameOrg";
  private String portNameOrg;

  public static final String JSON_PROPERTY_SIGNAL_RATE = "signalRate";
  private String signalRate;

  public static final String JSON_PROPERTY_ACTIVE_FROM = "activeFrom";
  private DateTime activeFrom;

  public static final String JSON_PROPERTY_NOMINAL_UTILIZATION = "nominalUtilization";
  private BigDecimal nominalUtilization;

  public static final String JSON_PROPERTY_C_DATA_SOURCE_DELETED = "cDataSourceDeleted";
  private String cDataSourceDeleted;

  public static final String JSON_PROPERTY_C_SERVICE_SIDE = "cServiceSide";
  private String cServiceSide;

  public static final String JSON_PROPERTY_OVERLOAD_WARNING = "overloadWarning";
  private String overloadWarning;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private BigDecimal bandwidth;

  public static final String JSON_PROPERTY_CONTEXT_ID = "contextId";
  private String contextId;

  public static final String JSON_PROPERTY_PORT_CATEGORY = "portCategory";
  private String portCategory;

  public static final String JSON_PROPERTY_PORT_TYPE = "portType";
  private String portType;

  public static final String JSON_PROPERTY_C_DATA_SOURCE = "cDataSource";
  private String cDataSource;

  public static final String JSON_PROPERTY_PORT_FUNCTION = "portFunction";
  private String portFunction;

  public static final String JSON_PROPERTY_IMA = "ima";
  private Boolean ima;

  public static final String JSON_PROPERTY_ACTIVE_UNTIL = "activeUntil";
  private DateTime activeUntil;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC = "createLinkCustomIpaccessSvc";
  private CreateSupportType2LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID = "createLinkCustomSvid";
  private CreateSupportType2LogicalPortCreateLinkCustomSvidRequestData createLinkCustomSvid;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT = "createLinkCustomTcoInterconnect";
  private CreateSupportType2LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect;

  public static final String JSON_PROPERTY_CREATE_LINK_DEVICE_ALL = "createLinkDeviceAll";
  private CreateSupportType2LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll;

  public static final String JSON_PROPERTY_CREATE_LINK_PHYSICAL_PORT_DATA = "createLinkPhysicalPortData";
  private List<CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData> createLinkPhysicalPortData;

  public CreateSupportType2LogicalPortRequestData() {
  }

  public CreateSupportType2LogicalPortRequestData sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceId() {
    return sourceId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public CreateSupportType2LogicalPortRequestData rxBlockFlag(Boolean rxBlockFlag) {
    
    this.rxBlockFlag = rxBlockFlag;
    return this;
  }

   /**
   * Get rxBlockFlag
   * @return rxBlockFlag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRxBlockFlag() {
    return rxBlockFlag;
  }


  @JsonProperty(JSON_PROPERTY_RX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRxBlockFlag(Boolean rxBlockFlag) {
    this.rxBlockFlag = rxBlockFlag;
  }


  public CreateSupportType2LogicalPortRequestData sourceSystem(String sourceSystem) {
    
    this.sourceSystem = sourceSystem;
    return this;
  }

   /**
   * Get sourceSystem
   * @return sourceSystem
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceSystem() {
    return sourceSystem;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceSystem(String sourceSystem) {
    this.sourceSystem = sourceSystem;
  }


  public CreateSupportType2LogicalPortRequestData lockSubPort(Boolean lockSubPort) {
    
    this.lockSubPort = lockSubPort;
    return this;
  }

   /**
   * Get lockSubPort
   * @return lockSubPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCK_SUB_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLockSubPort() {
    return lockSubPort;
  }


  @JsonProperty(JSON_PROPERTY_LOCK_SUB_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLockSubPort(Boolean lockSubPort) {
    this.lockSubPort = lockSubPort;
  }


  public CreateSupportType2LogicalPortRequestData cDataSourceId(String cDataSourceId) {
    
    this.cDataSourceId = cDataSourceId;
    return this;
  }

   /**
   * Get cDataSourceId
   * @return cDataSourceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSourceId() {
    return cDataSourceId;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSourceId(String cDataSourceId) {
    this.cDataSourceId = cDataSourceId;
  }


  public CreateSupportType2LogicalPortRequestData portStatus(String portStatus) {
    
    this.portStatus = portStatus;
    return this;
  }

   /**
   * Get portStatus
   * @return portStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortStatus() {
    return portStatus;
  }


  @JsonProperty(JSON_PROPERTY_PORT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortStatus(String portStatus) {
    this.portStatus = portStatus;
  }


  public CreateSupportType2LogicalPortRequestData txBlockFlag(Boolean txBlockFlag) {
    
    this.txBlockFlag = txBlockFlag;
    return this;
  }

   /**
   * Get txBlockFlag
   * @return txBlockFlag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTxBlockFlag() {
    return txBlockFlag;
  }


  @JsonProperty(JSON_PROPERTY_TX_BLOCK_FLAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTxBlockFlag(Boolean txBlockFlag) {
    this.txBlockFlag = txBlockFlag;
  }


  public CreateSupportType2LogicalPortRequestData ownerSystem(String ownerSystem) {
    
    this.ownerSystem = ownerSystem;
    return this;
  }

   /**
   * Get ownerSystem
   * @return ownerSystem
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNER_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOwnerSystem() {
    return ownerSystem;
  }


  @JsonProperty(JSON_PROPERTY_OWNER_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwnerSystem(String ownerSystem) {
    this.ownerSystem = ownerSystem;
  }


  public CreateSupportType2LogicalPortRequestData portNo(BigDecimal portNo) {
    
    this.portNo = portNo;
    return this;
  }

   /**
   * Get portNo
   * @return portNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPortNo() {
    return portNo;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNo(BigDecimal portNo) {
    this.portNo = portNo;
  }


  public CreateSupportType2LogicalPortRequestData atm(Boolean atm) {
    
    this.atm = atm;
    return this;
  }

   /**
   * Get atm
   * @return atm
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAtm() {
    return atm;
  }


  @JsonProperty(JSON_PROPERTY_ATM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAtm(Boolean atm) {
    this.atm = atm;
  }


  public CreateSupportType2LogicalPortRequestData portNameOrg(String portNameOrg) {
    
    this.portNameOrg = portNameOrg;
    return this;
  }

   /**
   * Get portNameOrg
   * @return portNameOrg
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NAME_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortNameOrg() {
    return portNameOrg;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NAME_ORG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNameOrg(String portNameOrg) {
    this.portNameOrg = portNameOrg;
  }


  public CreateSupportType2LogicalPortRequestData signalRate(String signalRate) {
    
    this.signalRate = signalRate;
    return this;
  }

   /**
   * Get signalRate
   * @return signalRate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNAL_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignalRate() {
    return signalRate;
  }


  @JsonProperty(JSON_PROPERTY_SIGNAL_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignalRate(String signalRate) {
    this.signalRate = signalRate;
  }


  public CreateSupportType2LogicalPortRequestData activeFrom(DateTime activeFrom) {
    
    this.activeFrom = activeFrom;
    return this;
  }

   /**
   * Get activeFrom
   * @return activeFrom
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateTime getActiveFrom() {
    return activeFrom;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveFrom(DateTime activeFrom) {
    this.activeFrom = activeFrom;
  }


  public CreateSupportType2LogicalPortRequestData nominalUtilization(BigDecimal nominalUtilization) {
    
    this.nominalUtilization = nominalUtilization;
    return this;
  }

   /**
   * Get nominalUtilization
   * @return nominalUtilization
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOMINAL_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNominalUtilization() {
    return nominalUtilization;
  }


  @JsonProperty(JSON_PROPERTY_NOMINAL_UTILIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNominalUtilization(BigDecimal nominalUtilization) {
    this.nominalUtilization = nominalUtilization;
  }


  public CreateSupportType2LogicalPortRequestData cDataSourceDeleted(String cDataSourceDeleted) {
    
    this.cDataSourceDeleted = cDataSourceDeleted;
    return this;
  }

   /**
   * Get cDataSourceDeleted
   * @return cDataSourceDeleted
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSourceDeleted() {
    return cDataSourceDeleted;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSourceDeleted(String cDataSourceDeleted) {
    this.cDataSourceDeleted = cDataSourceDeleted;
  }


  public CreateSupportType2LogicalPortRequestData cServiceSide(String cServiceSide) {
    
    this.cServiceSide = cServiceSide;
    return this;
  }

   /**
   * Get cServiceSide
   * @return cServiceSide
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_SERVICE_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcServiceSide() {
    return cServiceSide;
  }


  @JsonProperty(JSON_PROPERTY_C_SERVICE_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcServiceSide(String cServiceSide) {
    this.cServiceSide = cServiceSide;
  }


  public CreateSupportType2LogicalPortRequestData overloadWarning(String overloadWarning) {
    
    this.overloadWarning = overloadWarning;
    return this;
  }

   /**
   * Get overloadWarning
   * @return overloadWarning
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERLOAD_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOverloadWarning() {
    return overloadWarning;
  }


  @JsonProperty(JSON_PROPERTY_OVERLOAD_WARNING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverloadWarning(String overloadWarning) {
    this.overloadWarning = overloadWarning;
  }


  public CreateSupportType2LogicalPortRequestData bandwidth(BigDecimal bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidth(BigDecimal bandwidth) {
    this.bandwidth = bandwidth;
  }


  public CreateSupportType2LogicalPortRequestData contextId(String contextId) {
    
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContextId() {
    return contextId;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextId(String contextId) {
    this.contextId = contextId;
  }


  public CreateSupportType2LogicalPortRequestData portCategory(String portCategory) {
    
    this.portCategory = portCategory;
    return this;
  }

   /**
   * Get portCategory
   * @return portCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortCategory() {
    return portCategory;
  }


  @JsonProperty(JSON_PROPERTY_PORT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortCategory(String portCategory) {
    this.portCategory = portCategory;
  }


  public CreateSupportType2LogicalPortRequestData portType(String portType) {
    
    this.portType = portType;
    return this;
  }

   /**
   * Get portType
   * @return portType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortType() {
    return portType;
  }


  @JsonProperty(JSON_PROPERTY_PORT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortType(String portType) {
    this.portType = portType;
  }


  public CreateSupportType2LogicalPortRequestData cDataSource(String cDataSource) {
    
    this.cDataSource = cDataSource;
    return this;
  }

   /**
   * Get cDataSource
   * @return cDataSource
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getcDataSource() {
    return cDataSource;
  }


  @JsonProperty(JSON_PROPERTY_C_DATA_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setcDataSource(String cDataSource) {
    this.cDataSource = cDataSource;
  }


  public CreateSupportType2LogicalPortRequestData portFunction(String portFunction) {
    
    this.portFunction = portFunction;
    return this;
  }

   /**
   * Get portFunction
   * @return portFunction
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortFunction() {
    return portFunction;
  }


  @JsonProperty(JSON_PROPERTY_PORT_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortFunction(String portFunction) {
    this.portFunction = portFunction;
  }


  public CreateSupportType2LogicalPortRequestData ima(Boolean ima) {
    
    this.ima = ima;
    return this;
  }

   /**
   * Get ima
   * @return ima
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIma() {
    return ima;
  }


  @JsonProperty(JSON_PROPERTY_IMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIma(Boolean ima) {
    this.ima = ima;
  }


  public CreateSupportType2LogicalPortRequestData activeUntil(DateTime activeUntil) {
    
    this.activeUntil = activeUntil;
    return this;
  }

   /**
   * Get activeUntil
   * @return activeUntil
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateTime getActiveUntil() {
    return activeUntil;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_UNTIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveUntil(DateTime activeUntil) {
    this.activeUntil = activeUntil;
  }


  public CreateSupportType2LogicalPortRequestData createLinkCustomIpaccessSvc(CreateSupportType2LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc) {
    
    this.createLinkCustomIpaccessSvc = createLinkCustomIpaccessSvc;
    return this;
  }

   /**
   * Get createLinkCustomIpaccessSvc
   * @return createLinkCustomIpaccessSvc
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType2LogicalPortCreateLinkCustomIpaccessSvcRequestData getCreateLinkCustomIpaccessSvc() {
    return createLinkCustomIpaccessSvc;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_IPACCESS_SVC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomIpaccessSvc(CreateSupportType2LogicalPortCreateLinkCustomIpaccessSvcRequestData createLinkCustomIpaccessSvc) {
    this.createLinkCustomIpaccessSvc = createLinkCustomIpaccessSvc;
  }


  public CreateSupportType2LogicalPortRequestData createLinkCustomSvid(CreateSupportType2LogicalPortCreateLinkCustomSvidRequestData createLinkCustomSvid) {
    
    this.createLinkCustomSvid = createLinkCustomSvid;
    return this;
  }

   /**
   * Get createLinkCustomSvid
   * @return createLinkCustomSvid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType2LogicalPortCreateLinkCustomSvidRequestData getCreateLinkCustomSvid() {
    return createLinkCustomSvid;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_SVID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomSvid(CreateSupportType2LogicalPortCreateLinkCustomSvidRequestData createLinkCustomSvid) {
    this.createLinkCustomSvid = createLinkCustomSvid;
  }


  public CreateSupportType2LogicalPortRequestData createLinkCustomTcoInterconnect(CreateSupportType2LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect) {
    
    this.createLinkCustomTcoInterconnect = createLinkCustomTcoInterconnect;
    return this;
  }

   /**
   * Get createLinkCustomTcoInterconnect
   * @return createLinkCustomTcoInterconnect
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateSupportType2LogicalPortCreateLinkCustomTcoInterconnectRequestData getCreateLinkCustomTcoInterconnect() {
    return createLinkCustomTcoInterconnect;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_TCO_INTERCONNECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomTcoInterconnect(CreateSupportType2LogicalPortCreateLinkCustomTcoInterconnectRequestData createLinkCustomTcoInterconnect) {
    this.createLinkCustomTcoInterconnect = createLinkCustomTcoInterconnect;
  }


  public CreateSupportType2LogicalPortRequestData createLinkDeviceAll(CreateSupportType2LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll) {
    
    this.createLinkDeviceAll = createLinkDeviceAll;
    return this;
  }

   /**
   * Get createLinkDeviceAll
   * @return createLinkDeviceAll
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_DEVICE_ALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateSupportType2LogicalPortCreateLinkDeviceAllRequestData getCreateLinkDeviceAll() {
    return createLinkDeviceAll;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_DEVICE_ALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreateLinkDeviceAll(CreateSupportType2LogicalPortCreateLinkDeviceAllRequestData createLinkDeviceAll) {
    this.createLinkDeviceAll = createLinkDeviceAll;
  }


  public CreateSupportType2LogicalPortRequestData createLinkPhysicalPortData(List<CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData> createLinkPhysicalPortData) {
    
    this.createLinkPhysicalPortData = createLinkPhysicalPortData;
    return this;
  }

  public CreateSupportType2LogicalPortRequestData addCreateLinkPhysicalPortDataItem(CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData createLinkPhysicalPortDataItem) {
    if (this.createLinkPhysicalPortData == null) {
      this.createLinkPhysicalPortData = new ArrayList<>();
    }
    this.createLinkPhysicalPortData.add(createLinkPhysicalPortDataItem);
    return this;
  }

   /**
   * Get createLinkPhysicalPortData
   * @return createLinkPhysicalPortData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_PHYSICAL_PORT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData> getCreateLinkPhysicalPortData() {
    return createLinkPhysicalPortData;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_PHYSICAL_PORT_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkPhysicalPortData(List<CreateSupportType2LogicalPortCreateLinkPhysicalPortDataRequestData> createLinkPhysicalPortData) {
    this.createLinkPhysicalPortData = createLinkPhysicalPortData;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSupportType2LogicalPortRequestData createSupportType2LogicalPortRequestData = (CreateSupportType2LogicalPortRequestData) o;
    return Objects.equals(this.sourceId, createSupportType2LogicalPortRequestData.sourceId) &&
        Objects.equals(this.rxBlockFlag, createSupportType2LogicalPortRequestData.rxBlockFlag) &&
        Objects.equals(this.sourceSystem, createSupportType2LogicalPortRequestData.sourceSystem) &&
        Objects.equals(this.lockSubPort, createSupportType2LogicalPortRequestData.lockSubPort) &&
        Objects.equals(this.cDataSourceId, createSupportType2LogicalPortRequestData.cDataSourceId) &&
        Objects.equals(this.portStatus, createSupportType2LogicalPortRequestData.portStatus) &&
        Objects.equals(this.txBlockFlag, createSupportType2LogicalPortRequestData.txBlockFlag) &&
        Objects.equals(this.ownerSystem, createSupportType2LogicalPortRequestData.ownerSystem) &&
        Objects.equals(this.portNo, createSupportType2LogicalPortRequestData.portNo) &&
        Objects.equals(this.atm, createSupportType2LogicalPortRequestData.atm) &&
        Objects.equals(this.portNameOrg, createSupportType2LogicalPortRequestData.portNameOrg) &&
        Objects.equals(this.signalRate, createSupportType2LogicalPortRequestData.signalRate) &&
        Objects.equals(this.activeFrom, createSupportType2LogicalPortRequestData.activeFrom) &&
        Objects.equals(this.nominalUtilization, createSupportType2LogicalPortRequestData.nominalUtilization) &&
        Objects.equals(this.cDataSourceDeleted, createSupportType2LogicalPortRequestData.cDataSourceDeleted) &&
        Objects.equals(this.cServiceSide, createSupportType2LogicalPortRequestData.cServiceSide) &&
        Objects.equals(this.overloadWarning, createSupportType2LogicalPortRequestData.overloadWarning) &&
        Objects.equals(this.bandwidth, createSupportType2LogicalPortRequestData.bandwidth) &&
        Objects.equals(this.contextId, createSupportType2LogicalPortRequestData.contextId) &&
        Objects.equals(this.portCategory, createSupportType2LogicalPortRequestData.portCategory) &&
        Objects.equals(this.portType, createSupportType2LogicalPortRequestData.portType) &&
        Objects.equals(this.cDataSource, createSupportType2LogicalPortRequestData.cDataSource) &&
        Objects.equals(this.portFunction, createSupportType2LogicalPortRequestData.portFunction) &&
        Objects.equals(this.ima, createSupportType2LogicalPortRequestData.ima) &&
        Objects.equals(this.activeUntil, createSupportType2LogicalPortRequestData.activeUntil) &&
        Objects.equals(this.createLinkCustomIpaccessSvc, createSupportType2LogicalPortRequestData.createLinkCustomIpaccessSvc) &&
        Objects.equals(this.createLinkCustomSvid, createSupportType2LogicalPortRequestData.createLinkCustomSvid) &&
        Objects.equals(this.createLinkCustomTcoInterconnect, createSupportType2LogicalPortRequestData.createLinkCustomTcoInterconnect) &&
        Objects.equals(this.createLinkDeviceAll, createSupportType2LogicalPortRequestData.createLinkDeviceAll) &&
        Objects.equals(this.createLinkPhysicalPortData, createSupportType2LogicalPortRequestData.createLinkPhysicalPortData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, rxBlockFlag, sourceSystem, lockSubPort, cDataSourceId, portStatus, txBlockFlag, ownerSystem, portNo, atm, portNameOrg, signalRate, activeFrom, nominalUtilization, cDataSourceDeleted, cServiceSide, overloadWarning, bandwidth, contextId, portCategory, portType, cDataSource, portFunction, ima, activeUntil, createLinkCustomIpaccessSvc, createLinkCustomSvid, createLinkCustomTcoInterconnect, createLinkDeviceAll, createLinkPhysicalPortData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSupportType2LogicalPortRequestData {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    rxBlockFlag: ").append(toIndentedString(rxBlockFlag)).append("\n");
    sb.append("    sourceSystem: ").append(toIndentedString(sourceSystem)).append("\n");
    sb.append("    lockSubPort: ").append(toIndentedString(lockSubPort)).append("\n");
    sb.append("    cDataSourceId: ").append(toIndentedString(cDataSourceId)).append("\n");
    sb.append("    portStatus: ").append(toIndentedString(portStatus)).append("\n");
    sb.append("    txBlockFlag: ").append(toIndentedString(txBlockFlag)).append("\n");
    sb.append("    ownerSystem: ").append(toIndentedString(ownerSystem)).append("\n");
    sb.append("    portNo: ").append(toIndentedString(portNo)).append("\n");
    sb.append("    atm: ").append(toIndentedString(atm)).append("\n");
    sb.append("    portNameOrg: ").append(toIndentedString(portNameOrg)).append("\n");
    sb.append("    signalRate: ").append(toIndentedString(signalRate)).append("\n");
    sb.append("    activeFrom: ").append(toIndentedString(activeFrom)).append("\n");
    sb.append("    nominalUtilization: ").append(toIndentedString(nominalUtilization)).append("\n");
    sb.append("    cDataSourceDeleted: ").append(toIndentedString(cDataSourceDeleted)).append("\n");
    sb.append("    cServiceSide: ").append(toIndentedString(cServiceSide)).append("\n");
    sb.append("    overloadWarning: ").append(toIndentedString(overloadWarning)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    portCategory: ").append(toIndentedString(portCategory)).append("\n");
    sb.append("    portType: ").append(toIndentedString(portType)).append("\n");
    sb.append("    cDataSource: ").append(toIndentedString(cDataSource)).append("\n");
    sb.append("    portFunction: ").append(toIndentedString(portFunction)).append("\n");
    sb.append("    ima: ").append(toIndentedString(ima)).append("\n");
    sb.append("    activeUntil: ").append(toIndentedString(activeUntil)).append("\n");
    sb.append("    createLinkCustomIpaccessSvc: ").append(toIndentedString(createLinkCustomIpaccessSvc)).append("\n");
    sb.append("    createLinkCustomSvid: ").append(toIndentedString(createLinkCustomSvid)).append("\n");
    sb.append("    createLinkCustomTcoInterconnect: ").append(toIndentedString(createLinkCustomTcoInterconnect)).append("\n");
    sb.append("    createLinkDeviceAll: ").append(toIndentedString(createLinkDeviceAll)).append("\n");
    sb.append("    createLinkPhysicalPortData: ").append(toIndentedString(createLinkPhysicalPortData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

