/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BearerBandwidthBookingForPacketDataServiceResponseData
 */
@JsonPropertyOrder({
  BearerBandwidthBookingForPacketDataServiceResponseData.JSON_PROPERTY_OVERBOOKING,
  BearerBandwidthBookingForPacketDataServiceResponseData.JSON_PROPERTY_BANDWIDTH,
  BearerBandwidthBookingForPacketDataServiceResponseData.JSON_PROPERTY_SERVICE_RX_ELID,
  BearerBandwidthBookingForPacketDataServiceResponseData.JSON_PROPERTY_SERVICE_TX_ELID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class BearerBandwidthBookingForPacketDataServiceResponseData {
  public static final String JSON_PROPERTY_OVERBOOKING = "overbooking";
  private Boolean overbooking;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private BigDecimal bandwidth;

  public static final String JSON_PROPERTY_SERVICE_RX_ELID = "serviceRxElid";
  private String serviceRxElid;

  public static final String JSON_PROPERTY_SERVICE_TX_ELID = "serviceTxElid";
  private String serviceTxElid;

  public BearerBandwidthBookingForPacketDataServiceResponseData() {
  }

  public BearerBandwidthBookingForPacketDataServiceResponseData overbooking(Boolean overbooking) {
    
    this.overbooking = overbooking;
    return this;
  }

   /**
   * Get overbooking
   * @return overbooking
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERBOOKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOverbooking() {
    return overbooking;
  }


  @JsonProperty(JSON_PROPERTY_OVERBOOKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverbooking(Boolean overbooking) {
    this.overbooking = overbooking;
  }


  public BearerBandwidthBookingForPacketDataServiceResponseData bandwidth(BigDecimal bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Get bandwidth
   * @return bandwidth
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBandwidth(BigDecimal bandwidth) {
    this.bandwidth = bandwidth;
  }


  public BearerBandwidthBookingForPacketDataServiceResponseData serviceRxElid(String serviceRxElid) {
    
    this.serviceRxElid = serviceRxElid;
    return this;
  }

   /**
   * Get serviceRxElid
   * @return serviceRxElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_RX_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceRxElid() {
    return serviceRxElid;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_RX_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceRxElid(String serviceRxElid) {
    this.serviceRxElid = serviceRxElid;
  }


  public BearerBandwidthBookingForPacketDataServiceResponseData serviceTxElid(String serviceTxElid) {
    
    this.serviceTxElid = serviceTxElid;
    return this;
  }

   /**
   * Get serviceTxElid
   * @return serviceTxElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_TX_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceTxElid() {
    return serviceTxElid;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_TX_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceTxElid(String serviceTxElid) {
    this.serviceTxElid = serviceTxElid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BearerBandwidthBookingForPacketDataServiceResponseData bearerBandwidthBookingForPacketDataServiceResponseData = (BearerBandwidthBookingForPacketDataServiceResponseData) o;
    return Objects.equals(this.overbooking, bearerBandwidthBookingForPacketDataServiceResponseData.overbooking) &&
        Objects.equals(this.bandwidth, bearerBandwidthBookingForPacketDataServiceResponseData.bandwidth) &&
        Objects.equals(this.serviceRxElid, bearerBandwidthBookingForPacketDataServiceResponseData.serviceRxElid) &&
        Objects.equals(this.serviceTxElid, bearerBandwidthBookingForPacketDataServiceResponseData.serviceTxElid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overbooking, bandwidth, serviceRxElid, serviceTxElid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BearerBandwidthBookingForPacketDataServiceResponseData {\n");
    sb.append("    overbooking: ").append(toIndentedString(overbooking)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    serviceRxElid: ").append(toIndentedString(serviceRxElid)).append("\n");
    sb.append("    serviceTxElid: ").append(toIndentedString(serviceTxElid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

