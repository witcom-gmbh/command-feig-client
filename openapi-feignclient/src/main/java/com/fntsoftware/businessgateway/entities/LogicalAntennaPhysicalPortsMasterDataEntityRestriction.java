/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.RestrictionsNumeric;
import com.fntsoftware.businessgateway.entities.RestrictionsString;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * LogicalAntennaPhysicalPortsMasterDataEntityRestriction
 */
@JsonPropertyOrder({
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_CONNECTOR,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_SOCKET_NAME,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_TYPE_ELID,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_SOCKET_SIDE,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_LINE_TYPE,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_REMOTE_ELECTRICAL_TILT,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_SOCKET_NO,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_MEDIUM,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_ELID,
  LogicalAntennaPhysicalPortsMasterDataEntityRestriction.JSON_PROPERTY_LOG_SLOT_NAME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class LogicalAntennaPhysicalPortsMasterDataEntityRestriction {
  public static final String JSON_PROPERTY_CONNECTOR = "connector";
  private RestrictionsString connector;

  public static final String JSON_PROPERTY_SOCKET_NAME = "socketName";
  private RestrictionsString socketName;

  public static final String JSON_PROPERTY_TYPE_ELID = "typeElid";
  private RestrictionsString typeElid;

  public static final String JSON_PROPERTY_SOCKET_SIDE = "socketSide";
  private RestrictionsString socketSide;

  public static final String JSON_PROPERTY_LINE_TYPE = "lineType";
  private RestrictionsString lineType;

  public static final String JSON_PROPERTY_REMOTE_ELECTRICAL_TILT = "remoteElectricalTilt";
  private RestrictionsString remoteElectricalTilt;

  public static final String JSON_PROPERTY_SOCKET_NO = "socketNo";
  private RestrictionsNumeric socketNo;

  public static final String JSON_PROPERTY_MEDIUM = "medium";
  private RestrictionsString medium;

  public static final String JSON_PROPERTY_ELID = "elid";
  private RestrictionsString elid;

  public static final String JSON_PROPERTY_LOG_SLOT_NAME = "logSlotName";
  private RestrictionsString logSlotName;

  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction() {
  }

  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction connector(RestrictionsString connector) {
    
    this.connector = connector;
    return this;
  }

   /**
   * Get connector
   * @return connector
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getConnector() {
    return connector;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnector(RestrictionsString connector) {
    this.connector = connector;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction socketName(RestrictionsString socketName) {
    
    this.socketName = socketName;
    return this;
  }

   /**
   * Get socketName
   * @return socketName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getSocketName() {
    return socketName;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketName(RestrictionsString socketName) {
    this.socketName = socketName;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction typeElid(RestrictionsString typeElid) {
    
    this.typeElid = typeElid;
    return this;
  }

   /**
   * Get typeElid
   * @return typeElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getTypeElid() {
    return typeElid;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeElid(RestrictionsString typeElid) {
    this.typeElid = typeElid;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction socketSide(RestrictionsString socketSide) {
    
    this.socketSide = socketSide;
    return this;
  }

   /**
   * Get socketSide
   * @return socketSide
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getSocketSide() {
    return socketSide;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketSide(RestrictionsString socketSide) {
    this.socketSide = socketSide;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction lineType(RestrictionsString lineType) {
    
    this.lineType = lineType;
    return this;
  }

   /**
   * Get lineType
   * @return lineType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getLineType() {
    return lineType;
  }


  @JsonProperty(JSON_PROPERTY_LINE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLineType(RestrictionsString lineType) {
    this.lineType = lineType;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction remoteElectricalTilt(RestrictionsString remoteElectricalTilt) {
    
    this.remoteElectricalTilt = remoteElectricalTilt;
    return this;
  }

   /**
   * Get remoteElectricalTilt
   * @return remoteElectricalTilt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_ELECTRICAL_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getRemoteElectricalTilt() {
    return remoteElectricalTilt;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_ELECTRICAL_TILT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteElectricalTilt(RestrictionsString remoteElectricalTilt) {
    this.remoteElectricalTilt = remoteElectricalTilt;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction socketNo(RestrictionsNumeric socketNo) {
    
    this.socketNo = socketNo;
    return this;
  }

   /**
   * Get socketNo
   * @return socketNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsNumeric getSocketNo() {
    return socketNo;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketNo(RestrictionsNumeric socketNo) {
    this.socketNo = socketNo;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction medium(RestrictionsString medium) {
    
    this.medium = medium;
    return this;
  }

   /**
   * Get medium
   * @return medium
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getMedium() {
    return medium;
  }


  @JsonProperty(JSON_PROPERTY_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedium(RestrictionsString medium) {
    this.medium = medium;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction elid(RestrictionsString elid) {
    
    this.elid = elid;
    return this;
  }

   /**
   * Get elid
   * @return elid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getElid() {
    return elid;
  }


  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElid(RestrictionsString elid) {
    this.elid = elid;
  }


  public LogicalAntennaPhysicalPortsMasterDataEntityRestriction logSlotName(RestrictionsString logSlotName) {
    
    this.logSlotName = logSlotName;
    return this;
  }

   /**
   * Get logSlotName
   * @return logSlotName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOG_SLOT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getLogSlotName() {
    return logSlotName;
  }


  @JsonProperty(JSON_PROPERTY_LOG_SLOT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogSlotName(RestrictionsString logSlotName) {
    this.logSlotName = logSlotName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogicalAntennaPhysicalPortsMasterDataEntityRestriction logicalAntennaPhysicalPortsMasterDataEntityRestriction = (LogicalAntennaPhysicalPortsMasterDataEntityRestriction) o;
    return Objects.equals(this.connector, logicalAntennaPhysicalPortsMasterDataEntityRestriction.connector) &&
        Objects.equals(this.socketName, logicalAntennaPhysicalPortsMasterDataEntityRestriction.socketName) &&
        Objects.equals(this.typeElid, logicalAntennaPhysicalPortsMasterDataEntityRestriction.typeElid) &&
        Objects.equals(this.socketSide, logicalAntennaPhysicalPortsMasterDataEntityRestriction.socketSide) &&
        Objects.equals(this.lineType, logicalAntennaPhysicalPortsMasterDataEntityRestriction.lineType) &&
        Objects.equals(this.remoteElectricalTilt, logicalAntennaPhysicalPortsMasterDataEntityRestriction.remoteElectricalTilt) &&
        Objects.equals(this.socketNo, logicalAntennaPhysicalPortsMasterDataEntityRestriction.socketNo) &&
        Objects.equals(this.medium, logicalAntennaPhysicalPortsMasterDataEntityRestriction.medium) &&
        Objects.equals(this.elid, logicalAntennaPhysicalPortsMasterDataEntityRestriction.elid) &&
        Objects.equals(this.logSlotName, logicalAntennaPhysicalPortsMasterDataEntityRestriction.logSlotName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connector, socketName, typeElid, socketSide, lineType, remoteElectricalTilt, socketNo, medium, elid, logSlotName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogicalAntennaPhysicalPortsMasterDataEntityRestriction {\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    socketName: ").append(toIndentedString(socketName)).append("\n");
    sb.append("    typeElid: ").append(toIndentedString(typeElid)).append("\n");
    sb.append("    socketSide: ").append(toIndentedString(socketSide)).append("\n");
    sb.append("    lineType: ").append(toIndentedString(lineType)).append("\n");
    sb.append("    remoteElectricalTilt: ").append(toIndentedString(remoteElectricalTilt)).append("\n");
    sb.append("    socketNo: ").append(toIndentedString(socketNo)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    elid: ").append(toIndentedString(elid)).append("\n");
    sb.append("    logSlotName: ").append(toIndentedString(logSlotName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

