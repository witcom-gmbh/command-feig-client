/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PatchPowerCableSwapLinkDeviceRequestData
 */
@JsonPropertyOrder({
  PatchPowerCableSwapLinkDeviceRequestData.JSON_PROPERTY_PORT_IDENTIFIER_OLD,
  PatchPowerCableSwapLinkDeviceRequestData.JSON_PROPERTY_PORT_IDENTIFIER_NEW
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class PatchPowerCableSwapLinkDeviceRequestData {
  public static final String JSON_PROPERTY_PORT_IDENTIFIER_OLD = "portIdentifierOld";
  private String portIdentifierOld;

  public static final String JSON_PROPERTY_PORT_IDENTIFIER_NEW = "portIdentifierNew";
  private String portIdentifierNew;

  public PatchPowerCableSwapLinkDeviceRequestData() {
  }

  public PatchPowerCableSwapLinkDeviceRequestData portIdentifierOld(String portIdentifierOld) {
    
    this.portIdentifierOld = portIdentifierOld;
    return this;
  }

   /**
   * Get portIdentifierOld
   * @return portIdentifierOld
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_IDENTIFIER_OLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortIdentifierOld() {
    return portIdentifierOld;
  }


  @JsonProperty(JSON_PROPERTY_PORT_IDENTIFIER_OLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortIdentifierOld(String portIdentifierOld) {
    this.portIdentifierOld = portIdentifierOld;
  }


  public PatchPowerCableSwapLinkDeviceRequestData portIdentifierNew(String portIdentifierNew) {
    
    this.portIdentifierNew = portIdentifierNew;
    return this;
  }

   /**
   * Get portIdentifierNew
   * @return portIdentifierNew
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_IDENTIFIER_NEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortIdentifierNew() {
    return portIdentifierNew;
  }


  @JsonProperty(JSON_PROPERTY_PORT_IDENTIFIER_NEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortIdentifierNew(String portIdentifierNew) {
    this.portIdentifierNew = portIdentifierNew;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchPowerCableSwapLinkDeviceRequestData patchPowerCableSwapLinkDeviceRequestData = (PatchPowerCableSwapLinkDeviceRequestData) o;
    return Objects.equals(this.portIdentifierOld, patchPowerCableSwapLinkDeviceRequestData.portIdentifierOld) &&
        Objects.equals(this.portIdentifierNew, patchPowerCableSwapLinkDeviceRequestData.portIdentifierNew);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portIdentifierOld, portIdentifierNew);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchPowerCableSwapLinkDeviceRequestData {\n");
    sb.append("    portIdentifierOld: ").append(toIndentedString(portIdentifierOld)).append("\n");
    sb.append("    portIdentifierNew: ").append(toIndentedString(portIdentifierNew)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

