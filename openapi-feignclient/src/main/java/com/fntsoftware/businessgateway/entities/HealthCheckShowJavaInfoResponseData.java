/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * HealthCheckShowJavaInfoResponseData
 */
@JsonPropertyOrder({
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_TOMCAT_VERSION,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_JAVA_VM_VERSION,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_JAVA_RUNTIME_VERSION,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_JAVA_VM_NAME,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_OS_NAME,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_OS_ARCH,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_SUN_ARCH_DATA_MODEL,
  HealthCheckShowJavaInfoResponseData.JSON_PROPERTY_CURRENT_JAVA_LIB_PATH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class HealthCheckShowJavaInfoResponseData {
  public static final String JSON_PROPERTY_CURRENT_TOMCAT_VERSION = "currentTomcatVersion";
  private String currentTomcatVersion;

  public static final String JSON_PROPERTY_CURRENT_JAVA_VM_VERSION = "currentJavaVmVersion";
  private String currentJavaVmVersion;

  public static final String JSON_PROPERTY_CURRENT_JAVA_RUNTIME_VERSION = "currentJavaRuntimeVersion";
  private String currentJavaRuntimeVersion;

  public static final String JSON_PROPERTY_CURRENT_JAVA_VM_NAME = "currentJavaVmName";
  private String currentJavaVmName;

  public static final String JSON_PROPERTY_CURRENT_OS_NAME = "currentOsName";
  private String currentOsName;

  public static final String JSON_PROPERTY_CURRENT_OS_ARCH = "currentOsArch";
  private String currentOsArch;

  public static final String JSON_PROPERTY_CURRENT_SUN_ARCH_DATA_MODEL = "currentSunArchDataModel";
  private String currentSunArchDataModel;

  public static final String JSON_PROPERTY_CURRENT_JAVA_LIB_PATH = "currentJavaLibPath";
  private String currentJavaLibPath;

  public HealthCheckShowJavaInfoResponseData() {
  }

  public HealthCheckShowJavaInfoResponseData currentTomcatVersion(String currentTomcatVersion) {
    
    this.currentTomcatVersion = currentTomcatVersion;
    return this;
  }

   /**
   * Get currentTomcatVersion
   * @return currentTomcatVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_TOMCAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentTomcatVersion() {
    return currentTomcatVersion;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_TOMCAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentTomcatVersion(String currentTomcatVersion) {
    this.currentTomcatVersion = currentTomcatVersion;
  }


  public HealthCheckShowJavaInfoResponseData currentJavaVmVersion(String currentJavaVmVersion) {
    
    this.currentJavaVmVersion = currentJavaVmVersion;
    return this;
  }

   /**
   * Get currentJavaVmVersion
   * @return currentJavaVmVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_VM_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentJavaVmVersion() {
    return currentJavaVmVersion;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_VM_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentJavaVmVersion(String currentJavaVmVersion) {
    this.currentJavaVmVersion = currentJavaVmVersion;
  }


  public HealthCheckShowJavaInfoResponseData currentJavaRuntimeVersion(String currentJavaRuntimeVersion) {
    
    this.currentJavaRuntimeVersion = currentJavaRuntimeVersion;
    return this;
  }

   /**
   * Get currentJavaRuntimeVersion
   * @return currentJavaRuntimeVersion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_RUNTIME_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentJavaRuntimeVersion() {
    return currentJavaRuntimeVersion;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_RUNTIME_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentJavaRuntimeVersion(String currentJavaRuntimeVersion) {
    this.currentJavaRuntimeVersion = currentJavaRuntimeVersion;
  }


  public HealthCheckShowJavaInfoResponseData currentJavaVmName(String currentJavaVmName) {
    
    this.currentJavaVmName = currentJavaVmName;
    return this;
  }

   /**
   * Get currentJavaVmName
   * @return currentJavaVmName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_VM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentJavaVmName() {
    return currentJavaVmName;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_VM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentJavaVmName(String currentJavaVmName) {
    this.currentJavaVmName = currentJavaVmName;
  }


  public HealthCheckShowJavaInfoResponseData currentOsName(String currentOsName) {
    
    this.currentOsName = currentOsName;
    return this;
  }

   /**
   * Get currentOsName
   * @return currentOsName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_OS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentOsName() {
    return currentOsName;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_OS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentOsName(String currentOsName) {
    this.currentOsName = currentOsName;
  }


  public HealthCheckShowJavaInfoResponseData currentOsArch(String currentOsArch) {
    
    this.currentOsArch = currentOsArch;
    return this;
  }

   /**
   * Get currentOsArch
   * @return currentOsArch
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_OS_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentOsArch() {
    return currentOsArch;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_OS_ARCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentOsArch(String currentOsArch) {
    this.currentOsArch = currentOsArch;
  }


  public HealthCheckShowJavaInfoResponseData currentSunArchDataModel(String currentSunArchDataModel) {
    
    this.currentSunArchDataModel = currentSunArchDataModel;
    return this;
  }

   /**
   * Get currentSunArchDataModel
   * @return currentSunArchDataModel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_SUN_ARCH_DATA_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentSunArchDataModel() {
    return currentSunArchDataModel;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_SUN_ARCH_DATA_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentSunArchDataModel(String currentSunArchDataModel) {
    this.currentSunArchDataModel = currentSunArchDataModel;
  }


  public HealthCheckShowJavaInfoResponseData currentJavaLibPath(String currentJavaLibPath) {
    
    this.currentJavaLibPath = currentJavaLibPath;
    return this;
  }

   /**
   * Get currentJavaLibPath
   * @return currentJavaLibPath
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_LIB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentJavaLibPath() {
    return currentJavaLibPath;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_JAVA_LIB_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentJavaLibPath(String currentJavaLibPath) {
    this.currentJavaLibPath = currentJavaLibPath;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheckShowJavaInfoResponseData healthCheckShowJavaInfoResponseData = (HealthCheckShowJavaInfoResponseData) o;
    return Objects.equals(this.currentTomcatVersion, healthCheckShowJavaInfoResponseData.currentTomcatVersion) &&
        Objects.equals(this.currentJavaVmVersion, healthCheckShowJavaInfoResponseData.currentJavaVmVersion) &&
        Objects.equals(this.currentJavaRuntimeVersion, healthCheckShowJavaInfoResponseData.currentJavaRuntimeVersion) &&
        Objects.equals(this.currentJavaVmName, healthCheckShowJavaInfoResponseData.currentJavaVmName) &&
        Objects.equals(this.currentOsName, healthCheckShowJavaInfoResponseData.currentOsName) &&
        Objects.equals(this.currentOsArch, healthCheckShowJavaInfoResponseData.currentOsArch) &&
        Objects.equals(this.currentSunArchDataModel, healthCheckShowJavaInfoResponseData.currentSunArchDataModel) &&
        Objects.equals(this.currentJavaLibPath, healthCheckShowJavaInfoResponseData.currentJavaLibPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentTomcatVersion, currentJavaVmVersion, currentJavaRuntimeVersion, currentJavaVmName, currentOsName, currentOsArch, currentSunArchDataModel, currentJavaLibPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheckShowJavaInfoResponseData {\n");
    sb.append("    currentTomcatVersion: ").append(toIndentedString(currentTomcatVersion)).append("\n");
    sb.append("    currentJavaVmVersion: ").append(toIndentedString(currentJavaVmVersion)).append("\n");
    sb.append("    currentJavaRuntimeVersion: ").append(toIndentedString(currentJavaRuntimeVersion)).append("\n");
    sb.append("    currentJavaVmName: ").append(toIndentedString(currentJavaVmName)).append("\n");
    sb.append("    currentOsName: ").append(toIndentedString(currentOsName)).append("\n");
    sb.append("    currentOsArch: ").append(toIndentedString(currentOsArch)).append("\n");
    sb.append("    currentSunArchDataModel: ").append(toIndentedString(currentSunArchDataModel)).append("\n");
    sb.append("    currentJavaLibPath: ").append(toIndentedString(currentJavaLibPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

