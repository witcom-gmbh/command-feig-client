/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131102312
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DeviceAllcardPosition
 */
@JsonPropertyOrder({
  DeviceAllcardPosition.JSON_PROPERTY_SLOT_NAME,
  DeviceAllcardPosition.JSON_PROPERTY_CARD_VISIBLE_ID,
  DeviceAllcardPosition.JSON_PROPERTY_CARD_ID,
  DeviceAllcardPosition.JSON_PROPERTY_CARD_ELID,
  DeviceAllcardPosition.JSON_PROPERTY_SLOT_NO
})
@JsonTypeName("deviceAllcardPosition")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:00:24.721128812Z[Etc/UTC]")
public class DeviceAllcardPosition {
  public static final String JSON_PROPERTY_SLOT_NAME = "slotName";
  private String slotName;

  public static final String JSON_PROPERTY_CARD_VISIBLE_ID = "cardVisibleId";
  private String cardVisibleId;

  public static final String JSON_PROPERTY_CARD_ID = "cardId";
  private String cardId;

  public static final String JSON_PROPERTY_CARD_ELID = "cardElid";
  private String cardElid;

  public static final String JSON_PROPERTY_SLOT_NO = "slotNo";
  private BigDecimal slotNo;

  public DeviceAllcardPosition() {
  }

  public DeviceAllcardPosition slotName(String slotName) {
    
    this.slotName = slotName;
    return this;
  }

   /**
   * Get slotName
   * @return slotName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLOT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSlotName() {
    return slotName;
  }


  @JsonProperty(JSON_PROPERTY_SLOT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlotName(String slotName) {
    this.slotName = slotName;
  }


  public DeviceAllcardPosition cardVisibleId(String cardVisibleId) {
    
    this.cardVisibleId = cardVisibleId;
    return this;
  }

   /**
   * Get cardVisibleId
   * @return cardVisibleId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_VISIBLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardVisibleId() {
    return cardVisibleId;
  }


  @JsonProperty(JSON_PROPERTY_CARD_VISIBLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardVisibleId(String cardVisibleId) {
    this.cardVisibleId = cardVisibleId;
  }


  public DeviceAllcardPosition cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Get cardId
   * @return cardId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardId() {
    return cardId;
  }


  @JsonProperty(JSON_PROPERTY_CARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public DeviceAllcardPosition cardElid(String cardElid) {
    
    this.cardElid = cardElid;
    return this;
  }

   /**
   * Get cardElid
   * @return cardElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCardElid() {
    return cardElid;
  }


  @JsonProperty(JSON_PROPERTY_CARD_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardElid(String cardElid) {
    this.cardElid = cardElid;
  }


  public DeviceAllcardPosition slotNo(BigDecimal slotNo) {
    
    this.slotNo = slotNo;
    return this;
  }

   /**
   * Get slotNo
   * @return slotNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLOT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSlotNo() {
    return slotNo;
  }


  @JsonProperty(JSON_PROPERTY_SLOT_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlotNo(BigDecimal slotNo) {
    this.slotNo = slotNo;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceAllcardPosition deviceAllcardPosition = (DeviceAllcardPosition) o;
    return Objects.equals(this.slotName, deviceAllcardPosition.slotName) &&
        Objects.equals(this.cardVisibleId, deviceAllcardPosition.cardVisibleId) &&
        Objects.equals(this.cardId, deviceAllcardPosition.cardId) &&
        Objects.equals(this.cardElid, deviceAllcardPosition.cardElid) &&
        Objects.equals(this.slotNo, deviceAllcardPosition.slotNo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slotName, cardVisibleId, cardId, cardElid, slotNo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceAllcardPosition {\n");
    sb.append("    slotName: ").append(toIndentedString(slotName)).append("\n");
    sb.append("    cardVisibleId: ").append(toIndentedString(cardVisibleId)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardElid: ").append(toIndentedString(cardElid)).append("\n");
    sb.append("    slotNo: ").append(toIndentedString(slotNo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

