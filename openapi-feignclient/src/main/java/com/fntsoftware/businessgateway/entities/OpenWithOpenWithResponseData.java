/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * OpenWithOpenWithResponseData
 */
@JsonPropertyOrder({
  OpenWithOpenWithResponseData.JSON_PROPERTY_MODULE_VIEW,
  OpenWithOpenWithResponseData.JSON_PROPERTY_IS_DYNAMIC,
  OpenWithOpenWithResponseData.JSON_PROPERTY_APPLICATION,
  OpenWithOpenWithResponseData.JSON_PROPERTY_METHOD,
  OpenWithOpenWithResponseData.JSON_PROPERTY_MODULE,
  OpenWithOpenWithResponseData.JSON_PROPERTY_ICON,
  OpenWithOpenWithResponseData.JSON_PROPERTY_NAME,
  OpenWithOpenWithResponseData.JSON_PROPERTY_DEFAULT_ENTRY,
  OpenWithOpenWithResponseData.JSON_PROPERTY_ELID,
  OpenWithOpenWithResponseData.JSON_PROPERTY_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class OpenWithOpenWithResponseData {
  public static final String JSON_PROPERTY_MODULE_VIEW = "moduleView";
  private String moduleView;

  public static final String JSON_PROPERTY_IS_DYNAMIC = "isDynamic";
  private Boolean isDynamic;

  public static final String JSON_PROPERTY_APPLICATION = "application";
  private String application;

  public static final String JSON_PROPERTY_METHOD = "method";
  private String method;

  public static final String JSON_PROPERTY_MODULE = "module";
  private String module;

  public static final String JSON_PROPERTY_ICON = "icon";
  private String icon;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DEFAULT_ENTRY = "defaultEntry";
  private Boolean defaultEntry;

  public static final String JSON_PROPERTY_ELID = "elid";
  private String elid;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public OpenWithOpenWithResponseData() {
  }

  public OpenWithOpenWithResponseData moduleView(String moduleView) {
    
    this.moduleView = moduleView;
    return this;
  }

   /**
   * Get moduleView
   * @return moduleView
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODULE_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModuleView() {
    return moduleView;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModuleView(String moduleView) {
    this.moduleView = moduleView;
  }


  public OpenWithOpenWithResponseData isDynamic(Boolean isDynamic) {
    
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * Get isDynamic
   * @return isDynamic
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_DYNAMIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsDynamic() {
    return isDynamic;
  }


  @JsonProperty(JSON_PROPERTY_IS_DYNAMIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }


  public OpenWithOpenWithResponseData application(String application) {
    
    this.application = application;
    return this;
  }

   /**
   * Get application
   * @return application
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getApplication() {
    return application;
  }


  @JsonProperty(JSON_PROPERTY_APPLICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplication(String application) {
    this.application = application;
  }


  public OpenWithOpenWithResponseData method(String method) {
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(String method) {
    this.method = method;
  }


  public OpenWithOpenWithResponseData module(String module) {
    
    this.module = module;
    return this;
  }

   /**
   * Get module
   * @return module
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModule() {
    return module;
  }


  @JsonProperty(JSON_PROPERTY_MODULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModule(String module) {
    this.module = module;
  }


  public OpenWithOpenWithResponseData icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(String icon) {
    this.icon = icon;
  }


  public OpenWithOpenWithResponseData name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public OpenWithOpenWithResponseData defaultEntry(Boolean defaultEntry) {
    
    this.defaultEntry = defaultEntry;
    return this;
  }

   /**
   * Get defaultEntry
   * @return defaultEntry
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDefaultEntry() {
    return defaultEntry;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultEntry(Boolean defaultEntry) {
    this.defaultEntry = defaultEntry;
  }


  public OpenWithOpenWithResponseData elid(String elid) {
    
    this.elid = elid;
    return this;
  }

   /**
   * Get elid
   * @return elid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getElid() {
    return elid;
  }


  @JsonProperty(JSON_PROPERTY_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElid(String elid) {
    this.elid = elid;
  }


  public OpenWithOpenWithResponseData url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenWithOpenWithResponseData openWithOpenWithResponseData = (OpenWithOpenWithResponseData) o;
    return Objects.equals(this.moduleView, openWithOpenWithResponseData.moduleView) &&
        Objects.equals(this.isDynamic, openWithOpenWithResponseData.isDynamic) &&
        Objects.equals(this.application, openWithOpenWithResponseData.application) &&
        Objects.equals(this.method, openWithOpenWithResponseData.method) &&
        Objects.equals(this.module, openWithOpenWithResponseData.module) &&
        Objects.equals(this.icon, openWithOpenWithResponseData.icon) &&
        Objects.equals(this.name, openWithOpenWithResponseData.name) &&
        Objects.equals(this.defaultEntry, openWithOpenWithResponseData.defaultEntry) &&
        Objects.equals(this.elid, openWithOpenWithResponseData.elid) &&
        Objects.equals(this.url, openWithOpenWithResponseData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moduleView, isDynamic, application, method, module, icon, name, defaultEntry, elid, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenWithOpenWithResponseData {\n");
    sb.append("    moduleView: ").append(toIndentedString(moduleView)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultEntry: ").append(toIndentedString(defaultEntry)).append("\n");
    sb.append("    elid: ").append(toIndentedString(elid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

