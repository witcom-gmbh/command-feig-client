/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240304133000
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.RestrictionsBoolean;
import com.fntsoftware.businessgateway.entities.RestrictionsNumeric;
import com.fntsoftware.businessgateway.entities.RestrictionsString;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SignalTraceGetTreeByPhysicalPortRestriction
 */
@JsonPropertyOrder({
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_FETCH_BASE_INFO,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_DEVICE_ALL_ELID,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_SOCKET_CATEGORY,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_FETCH_ADDITIONAL_INFO,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_FETCH_LOCATION,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_SOCKET_SIDE,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_SOCKET_SUB_NO,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_HOPS,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_SOCKET_NO,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_FETCH_PARENT_DEVICES,
  SignalTraceGetTreeByPhysicalPortRestriction.JSON_PROPERTY_PLAN_VIEW
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-04T13:31:32.601557352Z[Etc/UTC]")
public class SignalTraceGetTreeByPhysicalPortRestriction {
  public static final String JSON_PROPERTY_FETCH_BASE_INFO = "fetchBaseInfo";
  private RestrictionsBoolean fetchBaseInfo;

  public static final String JSON_PROPERTY_DEVICE_ALL_ELID = "deviceAllElid";
  private RestrictionsString deviceAllElid;

  public static final String JSON_PROPERTY_SOCKET_CATEGORY = "socketCategory";
  private RestrictionsString socketCategory;

  public static final String JSON_PROPERTY_FETCH_ADDITIONAL_INFO = "fetchAdditionalInfo";
  private RestrictionsBoolean fetchAdditionalInfo;

  public static final String JSON_PROPERTY_FETCH_LOCATION = "fetchLocation";
  private RestrictionsBoolean fetchLocation;

  public static final String JSON_PROPERTY_SOCKET_SIDE = "socketSide";
  private RestrictionsString socketSide;

  public static final String JSON_PROPERTY_SOCKET_SUB_NO = "socketSubNo";
  private RestrictionsNumeric socketSubNo;

  public static final String JSON_PROPERTY_HOPS = "hops";
  private RestrictionsNumeric hops;

  public static final String JSON_PROPERTY_SOCKET_NO = "socketNo";
  private RestrictionsNumeric socketNo;

  public static final String JSON_PROPERTY_FETCH_PARENT_DEVICES = "fetchParentDevices";
  private RestrictionsBoolean fetchParentDevices;

  public static final String JSON_PROPERTY_PLAN_VIEW = "planView";
  private RestrictionsBoolean planView;

  public SignalTraceGetTreeByPhysicalPortRestriction() {
  }

  public SignalTraceGetTreeByPhysicalPortRestriction fetchBaseInfo(RestrictionsBoolean fetchBaseInfo) {
    
    this.fetchBaseInfo = fetchBaseInfo;
    return this;
  }

   /**
   * Get fetchBaseInfo
   * @return fetchBaseInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FETCH_BASE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsBoolean getFetchBaseInfo() {
    return fetchBaseInfo;
  }


  @JsonProperty(JSON_PROPERTY_FETCH_BASE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFetchBaseInfo(RestrictionsBoolean fetchBaseInfo) {
    this.fetchBaseInfo = fetchBaseInfo;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction deviceAllElid(RestrictionsString deviceAllElid) {
    
    this.deviceAllElid = deviceAllElid;
    return this;
  }

   /**
   * Get deviceAllElid
   * @return deviceAllElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_ALL_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getDeviceAllElid() {
    return deviceAllElid;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_ALL_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceAllElid(RestrictionsString deviceAllElid) {
    this.deviceAllElid = deviceAllElid;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction socketCategory(RestrictionsString socketCategory) {
    
    this.socketCategory = socketCategory;
    return this;
  }

   /**
   * Get socketCategory
   * @return socketCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getSocketCategory() {
    return socketCategory;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketCategory(RestrictionsString socketCategory) {
    this.socketCategory = socketCategory;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction fetchAdditionalInfo(RestrictionsBoolean fetchAdditionalInfo) {
    
    this.fetchAdditionalInfo = fetchAdditionalInfo;
    return this;
  }

   /**
   * Get fetchAdditionalInfo
   * @return fetchAdditionalInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FETCH_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsBoolean getFetchAdditionalInfo() {
    return fetchAdditionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_FETCH_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFetchAdditionalInfo(RestrictionsBoolean fetchAdditionalInfo) {
    this.fetchAdditionalInfo = fetchAdditionalInfo;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction fetchLocation(RestrictionsBoolean fetchLocation) {
    
    this.fetchLocation = fetchLocation;
    return this;
  }

   /**
   * Get fetchLocation
   * @return fetchLocation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FETCH_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsBoolean getFetchLocation() {
    return fetchLocation;
  }


  @JsonProperty(JSON_PROPERTY_FETCH_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFetchLocation(RestrictionsBoolean fetchLocation) {
    this.fetchLocation = fetchLocation;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction socketSide(RestrictionsString socketSide) {
    
    this.socketSide = socketSide;
    return this;
  }

   /**
   * Get socketSide
   * @return socketSide
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsString getSocketSide() {
    return socketSide;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_SIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketSide(RestrictionsString socketSide) {
    this.socketSide = socketSide;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction socketSubNo(RestrictionsNumeric socketSubNo) {
    
    this.socketSubNo = socketSubNo;
    return this;
  }

   /**
   * Get socketSubNo
   * @return socketSubNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_SUB_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsNumeric getSocketSubNo() {
    return socketSubNo;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_SUB_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketSubNo(RestrictionsNumeric socketSubNo) {
    this.socketSubNo = socketSubNo;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction hops(RestrictionsNumeric hops) {
    
    this.hops = hops;
    return this;
  }

   /**
   * Get hops
   * @return hops
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsNumeric getHops() {
    return hops;
  }


  @JsonProperty(JSON_PROPERTY_HOPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHops(RestrictionsNumeric hops) {
    this.hops = hops;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction socketNo(RestrictionsNumeric socketNo) {
    
    this.socketNo = socketNo;
    return this;
  }

   /**
   * Get socketNo
   * @return socketNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsNumeric getSocketNo() {
    return socketNo;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketNo(RestrictionsNumeric socketNo) {
    this.socketNo = socketNo;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction fetchParentDevices(RestrictionsBoolean fetchParentDevices) {
    
    this.fetchParentDevices = fetchParentDevices;
    return this;
  }

   /**
   * Get fetchParentDevices
   * @return fetchParentDevices
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FETCH_PARENT_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsBoolean getFetchParentDevices() {
    return fetchParentDevices;
  }


  @JsonProperty(JSON_PROPERTY_FETCH_PARENT_DEVICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFetchParentDevices(RestrictionsBoolean fetchParentDevices) {
    this.fetchParentDevices = fetchParentDevices;
  }


  public SignalTraceGetTreeByPhysicalPortRestriction planView(RestrictionsBoolean planView) {
    
    this.planView = planView;
    return this;
  }

   /**
   * Get planView
   * @return planView
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RestrictionsBoolean getPlanView() {
    return planView;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanView(RestrictionsBoolean planView) {
    this.planView = planView;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalTraceGetTreeByPhysicalPortRestriction signalTraceGetTreeByPhysicalPortRestriction = (SignalTraceGetTreeByPhysicalPortRestriction) o;
    return Objects.equals(this.fetchBaseInfo, signalTraceGetTreeByPhysicalPortRestriction.fetchBaseInfo) &&
        Objects.equals(this.deviceAllElid, signalTraceGetTreeByPhysicalPortRestriction.deviceAllElid) &&
        Objects.equals(this.socketCategory, signalTraceGetTreeByPhysicalPortRestriction.socketCategory) &&
        Objects.equals(this.fetchAdditionalInfo, signalTraceGetTreeByPhysicalPortRestriction.fetchAdditionalInfo) &&
        Objects.equals(this.fetchLocation, signalTraceGetTreeByPhysicalPortRestriction.fetchLocation) &&
        Objects.equals(this.socketSide, signalTraceGetTreeByPhysicalPortRestriction.socketSide) &&
        Objects.equals(this.socketSubNo, signalTraceGetTreeByPhysicalPortRestriction.socketSubNo) &&
        Objects.equals(this.hops, signalTraceGetTreeByPhysicalPortRestriction.hops) &&
        Objects.equals(this.socketNo, signalTraceGetTreeByPhysicalPortRestriction.socketNo) &&
        Objects.equals(this.fetchParentDevices, signalTraceGetTreeByPhysicalPortRestriction.fetchParentDevices) &&
        Objects.equals(this.planView, signalTraceGetTreeByPhysicalPortRestriction.planView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fetchBaseInfo, deviceAllElid, socketCategory, fetchAdditionalInfo, fetchLocation, socketSide, socketSubNo, hops, socketNo, fetchParentDevices, planView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalTraceGetTreeByPhysicalPortRestriction {\n");
    sb.append("    fetchBaseInfo: ").append(toIndentedString(fetchBaseInfo)).append("\n");
    sb.append("    deviceAllElid: ").append(toIndentedString(deviceAllElid)).append("\n");
    sb.append("    socketCategory: ").append(toIndentedString(socketCategory)).append("\n");
    sb.append("    fetchAdditionalInfo: ").append(toIndentedString(fetchAdditionalInfo)).append("\n");
    sb.append("    fetchLocation: ").append(toIndentedString(fetchLocation)).append("\n");
    sb.append("    socketSide: ").append(toIndentedString(socketSide)).append("\n");
    sb.append("    socketSubNo: ").append(toIndentedString(socketSubNo)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    socketNo: ").append(toIndentedString(socketNo)).append("\n");
    sb.append("    fetchParentDevices: ").append(toIndentedString(fetchParentDevices)).append("\n");
    sb.append("    planView: ").append(toIndentedString(planView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

