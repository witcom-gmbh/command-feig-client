/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240226111547
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.SignalTraceport;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SignalTracealternativeConnection
 */
@JsonPropertyOrder({
  SignalTracealternativeConnection.JSON_PROPERTY_SOURCE_PORT,
  SignalTracealternativeConnection.JSON_PROPERTY_CONNECTION_HIERARCHY,
  SignalTracealternativeConnection.JSON_PROPERTY_CONNECTION_TYPE,
  SignalTracealternativeConnection.JSON_PROPERTY_TARGET_PORT,
  SignalTracealternativeConnection.JSON_PROPERTY_CONNECTION_ELID
})
@JsonTypeName("signalTracealternativeConnection")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-26T11:20:24.990023935Z[Etc/UTC]")
public class SignalTracealternativeConnection {
  public static final String JSON_PROPERTY_SOURCE_PORT = "sourcePort";
  private SignalTraceport sourcePort;

  public static final String JSON_PROPERTY_CONNECTION_HIERARCHY = "connectionHierarchy";
  private String connectionHierarchy;

  public static final String JSON_PROPERTY_CONNECTION_TYPE = "connectionType";
  private String connectionType;

  public static final String JSON_PROPERTY_TARGET_PORT = "targetPort";
  private SignalTraceport targetPort;

  public static final String JSON_PROPERTY_CONNECTION_ELID = "connectionElid";
  private String connectionElid;

  public SignalTracealternativeConnection() {
  }

  public SignalTracealternativeConnection sourcePort(SignalTraceport sourcePort) {
    
    this.sourcePort = sourcePort;
    return this;
  }

   /**
   * Get sourcePort
   * @return sourcePort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceport getSourcePort() {
    return sourcePort;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourcePort(SignalTraceport sourcePort) {
    this.sourcePort = sourcePort;
  }


  public SignalTracealternativeConnection connectionHierarchy(String connectionHierarchy) {
    
    this.connectionHierarchy = connectionHierarchy;
    return this;
  }

   /**
   * Get connectionHierarchy
   * @return connectionHierarchy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionHierarchy() {
    return connectionHierarchy;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionHierarchy(String connectionHierarchy) {
    this.connectionHierarchy = connectionHierarchy;
  }


  public SignalTracealternativeConnection connectionType(String connectionType) {
    
    this.connectionType = connectionType;
    return this;
  }

   /**
   * Get connectionType
   * @return connectionType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionType() {
    return connectionType;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public SignalTracealternativeConnection targetPort(SignalTraceport targetPort) {
    
    this.targetPort = targetPort;
    return this;
  }

   /**
   * Get targetPort
   * @return targetPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceport getTargetPort() {
    return targetPort;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetPort(SignalTraceport targetPort) {
    this.targetPort = targetPort;
  }


  public SignalTracealternativeConnection connectionElid(String connectionElid) {
    
    this.connectionElid = connectionElid;
    return this;
  }

   /**
   * Get connectionElid
   * @return connectionElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionElid() {
    return connectionElid;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionElid(String connectionElid) {
    this.connectionElid = connectionElid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalTracealternativeConnection signalTracealternativeConnection = (SignalTracealternativeConnection) o;
    return Objects.equals(this.sourcePort, signalTracealternativeConnection.sourcePort) &&
        Objects.equals(this.connectionHierarchy, signalTracealternativeConnection.connectionHierarchy) &&
        Objects.equals(this.connectionType, signalTracealternativeConnection.connectionType) &&
        Objects.equals(this.targetPort, signalTracealternativeConnection.targetPort) &&
        Objects.equals(this.connectionElid, signalTracealternativeConnection.connectionElid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourcePort, connectionHierarchy, connectionType, targetPort, connectionElid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalTracealternativeConnection {\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("    connectionHierarchy: ").append(toIndentedString(connectionHierarchy)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    targetPort: ").append(toIndentedString(targetPort)).append("\n");
    sb.append("    connectionElid: ").append(toIndentedString(connectionElid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

