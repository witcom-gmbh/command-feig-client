/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240226111547
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortPowerCreateLinkCustomPatchpointRequestData;
import com.fntsoftware.businessgateway.entities.UpdatePhysicalPortPowerCreateLinkGridInputPhaseRequestData;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdatePhysicalPortPowerRequestData
 */
@JsonPropertyOrder({
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_BORDER_COLOR,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_SOCKET_NAME,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_PORT_NETWORK_CATEGORY,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_CONTEXT_ID,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_PLAN_PORT_NETWORK_CATEGORY,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT,
  UpdatePhysicalPortPowerRequestData.JSON_PROPERTY_CREATE_LINK_GRID_INPUT_PHASE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-26T11:20:24.990023935Z[Etc/UTC]")
public class UpdatePhysicalPortPowerRequestData {
  public static final String JSON_PROPERTY_BORDER_COLOR = "borderColor";
  private String borderColor;

  public static final String JSON_PROPERTY_SOCKET_NAME = "socketName";
  private String socketName;

  public static final String JSON_PROPERTY_PORT_NETWORK_CATEGORY = "portNetworkCategory";
  private String portNetworkCategory;

  public static final String JSON_PROPERTY_CONTEXT_ID = "contextId";
  private String contextId;

  public static final String JSON_PROPERTY_PLAN_PORT_NETWORK_CATEGORY = "planPortNetworkCategory";
  private String planPortNetworkCategory;

  public static final String JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT = "createLinkCustomPatchpoint";
  private UpdatePhysicalPortPowerCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint;

  public static final String JSON_PROPERTY_CREATE_LINK_GRID_INPUT_PHASE = "createLinkGridInputPhase";
  private UpdatePhysicalPortPowerCreateLinkGridInputPhaseRequestData createLinkGridInputPhase;

  public UpdatePhysicalPortPowerRequestData() {
  }

  public UpdatePhysicalPortPowerRequestData borderColor(String borderColor) {
    
    this.borderColor = borderColor;
    return this;
  }

   /**
   * Get borderColor
   * @return borderColor
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BORDER_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBorderColor() {
    return borderColor;
  }


  @JsonProperty(JSON_PROPERTY_BORDER_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBorderColor(String borderColor) {
    this.borderColor = borderColor;
  }


  public UpdatePhysicalPortPowerRequestData socketName(String socketName) {
    
    this.socketName = socketName;
    return this;
  }

   /**
   * Get socketName
   * @return socketName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSocketName() {
    return socketName;
  }


  @JsonProperty(JSON_PROPERTY_SOCKET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSocketName(String socketName) {
    this.socketName = socketName;
  }


  public UpdatePhysicalPortPowerRequestData portNetworkCategory(String portNetworkCategory) {
    
    this.portNetworkCategory = portNetworkCategory;
    return this;
  }

   /**
   * Get portNetworkCategory
   * @return portNetworkCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPortNetworkCategory() {
    return portNetworkCategory;
  }


  @JsonProperty(JSON_PROPERTY_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPortNetworkCategory(String portNetworkCategory) {
    this.portNetworkCategory = portNetworkCategory;
  }


  public UpdatePhysicalPortPowerRequestData contextId(String contextId) {
    
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContextId() {
    return contextId;
  }


  @JsonProperty(JSON_PROPERTY_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContextId(String contextId) {
    this.contextId = contextId;
  }


  public UpdatePhysicalPortPowerRequestData planPortNetworkCategory(String planPortNetworkCategory) {
    
    this.planPortNetworkCategory = planPortNetworkCategory;
    return this;
  }

   /**
   * Get planPortNetworkCategory
   * @return planPortNetworkCategory
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanPortNetworkCategory() {
    return planPortNetworkCategory;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_PORT_NETWORK_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanPortNetworkCategory(String planPortNetworkCategory) {
    this.planPortNetworkCategory = planPortNetworkCategory;
  }


  public UpdatePhysicalPortPowerRequestData createLinkCustomPatchpoint(UpdatePhysicalPortPowerCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint) {
    
    this.createLinkCustomPatchpoint = createLinkCustomPatchpoint;
    return this;
  }

   /**
   * Get createLinkCustomPatchpoint
   * @return createLinkCustomPatchpoint
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpdatePhysicalPortPowerCreateLinkCustomPatchpointRequestData getCreateLinkCustomPatchpoint() {
    return createLinkCustomPatchpoint;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_CUSTOM_PATCHPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkCustomPatchpoint(UpdatePhysicalPortPowerCreateLinkCustomPatchpointRequestData createLinkCustomPatchpoint) {
    this.createLinkCustomPatchpoint = createLinkCustomPatchpoint;
  }


  public UpdatePhysicalPortPowerRequestData createLinkGridInputPhase(UpdatePhysicalPortPowerCreateLinkGridInputPhaseRequestData createLinkGridInputPhase) {
    
    this.createLinkGridInputPhase = createLinkGridInputPhase;
    return this;
  }

   /**
   * Get createLinkGridInputPhase
   * @return createLinkGridInputPhase
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_LINK_GRID_INPUT_PHASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpdatePhysicalPortPowerCreateLinkGridInputPhaseRequestData getCreateLinkGridInputPhase() {
    return createLinkGridInputPhase;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_LINK_GRID_INPUT_PHASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateLinkGridInputPhase(UpdatePhysicalPortPowerCreateLinkGridInputPhaseRequestData createLinkGridInputPhase) {
    this.createLinkGridInputPhase = createLinkGridInputPhase;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePhysicalPortPowerRequestData updatePhysicalPortPowerRequestData = (UpdatePhysicalPortPowerRequestData) o;
    return Objects.equals(this.borderColor, updatePhysicalPortPowerRequestData.borderColor) &&
        Objects.equals(this.socketName, updatePhysicalPortPowerRequestData.socketName) &&
        Objects.equals(this.portNetworkCategory, updatePhysicalPortPowerRequestData.portNetworkCategory) &&
        Objects.equals(this.contextId, updatePhysicalPortPowerRequestData.contextId) &&
        Objects.equals(this.planPortNetworkCategory, updatePhysicalPortPowerRequestData.planPortNetworkCategory) &&
        Objects.equals(this.createLinkCustomPatchpoint, updatePhysicalPortPowerRequestData.createLinkCustomPatchpoint) &&
        Objects.equals(this.createLinkGridInputPhase, updatePhysicalPortPowerRequestData.createLinkGridInputPhase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(borderColor, socketName, portNetworkCategory, contextId, planPortNetworkCategory, createLinkCustomPatchpoint, createLinkGridInputPhase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePhysicalPortPowerRequestData {\n");
    sb.append("    borderColor: ").append(toIndentedString(borderColor)).append("\n");
    sb.append("    socketName: ").append(toIndentedString(socketName)).append("\n");
    sb.append("    portNetworkCategory: ").append(toIndentedString(portNetworkCategory)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    planPortNetworkCategory: ").append(toIndentedString(planPortNetworkCategory)).append("\n");
    sb.append("    createLinkCustomPatchpoint: ").append(toIndentedString(createLinkCustomPatchpoint)).append("\n");
    sb.append("    createLinkGridInputPhase: ").append(toIndentedString(createLinkGridInputPhase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

