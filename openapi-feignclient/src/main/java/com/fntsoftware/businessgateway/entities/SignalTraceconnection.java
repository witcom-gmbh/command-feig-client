/*
 * Swagger for Command BGE
 * Swagger API for FNT Command Business Gateway
 *
 * The version of the OpenAPI document: 20240131110751
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fntsoftware.businessgateway.entities;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fntsoftware.businessgateway.entities.ObjectAttribute;
import com.fntsoftware.businessgateway.entities.SignalTraceconnectionBaseInfo;
import com.fntsoftware.businessgateway.entities.SignalTraceport;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SignalTraceconnection
 */
@JsonPropertyOrder({
  SignalTraceconnection.JSON_PROPERTY_BASE_INFO,
  SignalTraceconnection.JSON_PROPERTY_SOURCE_PORT,
  SignalTraceconnection.JSON_PROPERTY_CABLE_LINE_NO,
  SignalTraceconnection.JSON_PROPERTY_ADDITIONAL_INFO,
  SignalTraceconnection.JSON_PROPERTY_CABLE_ELID,
  SignalTraceconnection.JSON_PROPERTY_CONNECTION_HIERARCHY,
  SignalTraceconnection.JSON_PROPERTY_CONNECTION_TYPE,
  SignalTraceconnection.JSON_PROPERTY_TARGET_PORT,
  SignalTraceconnection.JSON_PROPERTY_CONNECTION_ELID,
  SignalTraceconnection.JSON_PROPERTY_PLAN_VIEW
})
@JsonTypeName("signalTraceconnection")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-31T11:10:37.320689708Z[Etc/UTC]")
public class SignalTraceconnection {
  public static final String JSON_PROPERTY_BASE_INFO = "baseInfo";
  private SignalTraceconnectionBaseInfo baseInfo;

  public static final String JSON_PROPERTY_SOURCE_PORT = "sourcePort";
  private SignalTraceport sourcePort;

  public static final String JSON_PROPERTY_CABLE_LINE_NO = "cableLineNo";
  private BigDecimal cableLineNo;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
  private List<ObjectAttribute> additionalInfo;

  public static final String JSON_PROPERTY_CABLE_ELID = "cableElid";
  private String cableElid;

  public static final String JSON_PROPERTY_CONNECTION_HIERARCHY = "connectionHierarchy";
  private String connectionHierarchy;

  public static final String JSON_PROPERTY_CONNECTION_TYPE = "connectionType";
  private String connectionType;

  public static final String JSON_PROPERTY_TARGET_PORT = "targetPort";
  private SignalTraceport targetPort;

  public static final String JSON_PROPERTY_CONNECTION_ELID = "connectionElid";
  private String connectionElid;

  public static final String JSON_PROPERTY_PLAN_VIEW = "planView";
  private Boolean planView;

  public SignalTraceconnection() {
  }

  public SignalTraceconnection baseInfo(SignalTraceconnectionBaseInfo baseInfo) {
    
    this.baseInfo = baseInfo;
    return this;
  }

   /**
   * Get baseInfo
   * @return baseInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceconnectionBaseInfo getBaseInfo() {
    return baseInfo;
  }


  @JsonProperty(JSON_PROPERTY_BASE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseInfo(SignalTraceconnectionBaseInfo baseInfo) {
    this.baseInfo = baseInfo;
  }


  public SignalTraceconnection sourcePort(SignalTraceport sourcePort) {
    
    this.sourcePort = sourcePort;
    return this;
  }

   /**
   * Get sourcePort
   * @return sourcePort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceport getSourcePort() {
    return sourcePort;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourcePort(SignalTraceport sourcePort) {
    this.sourcePort = sourcePort;
  }


  public SignalTraceconnection cableLineNo(BigDecimal cableLineNo) {
    
    this.cableLineNo = cableLineNo;
    return this;
  }

   /**
   * Get cableLineNo
   * @return cableLineNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CABLE_LINE_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCableLineNo() {
    return cableLineNo;
  }


  @JsonProperty(JSON_PROPERTY_CABLE_LINE_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCableLineNo(BigDecimal cableLineNo) {
    this.cableLineNo = cableLineNo;
  }


  public SignalTraceconnection additionalInfo(List<ObjectAttribute> additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  public SignalTraceconnection addAdditionalInfoItem(ObjectAttribute additionalInfoItem) {
    if (this.additionalInfo == null) {
      this.additionalInfo = new ArrayList<>();
    }
    this.additionalInfo.add(additionalInfoItem);
    return this;
  }

   /**
   * Get additionalInfo
   * @return additionalInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObjectAttribute> getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(List<ObjectAttribute> additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public SignalTraceconnection cableElid(String cableElid) {
    
    this.cableElid = cableElid;
    return this;
  }

   /**
   * Get cableElid
   * @return cableElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CABLE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCableElid() {
    return cableElid;
  }


  @JsonProperty(JSON_PROPERTY_CABLE_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCableElid(String cableElid) {
    this.cableElid = cableElid;
  }


  public SignalTraceconnection connectionHierarchy(String connectionHierarchy) {
    
    this.connectionHierarchy = connectionHierarchy;
    return this;
  }

   /**
   * Get connectionHierarchy
   * @return connectionHierarchy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionHierarchy() {
    return connectionHierarchy;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_HIERARCHY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionHierarchy(String connectionHierarchy) {
    this.connectionHierarchy = connectionHierarchy;
  }


  public SignalTraceconnection connectionType(String connectionType) {
    
    this.connectionType = connectionType;
    return this;
  }

   /**
   * Get connectionType
   * @return connectionType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionType() {
    return connectionType;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public SignalTraceconnection targetPort(SignalTraceport targetPort) {
    
    this.targetPort = targetPort;
    return this;
  }

   /**
   * Get targetPort
   * @return targetPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SignalTraceport getTargetPort() {
    return targetPort;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetPort(SignalTraceport targetPort) {
    this.targetPort = targetPort;
  }


  public SignalTraceconnection connectionElid(String connectionElid) {
    
    this.connectionElid = connectionElid;
    return this;
  }

   /**
   * Get connectionElid
   * @return connectionElid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTION_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionElid() {
    return connectionElid;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_ELID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectionElid(String connectionElid) {
    this.connectionElid = connectionElid;
  }


  public SignalTraceconnection planView(Boolean planView) {
    
    this.planView = planView;
    return this;
  }

   /**
   * Get planView
   * @return planView
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPlanView() {
    return planView;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanView(Boolean planView) {
    this.planView = planView;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalTraceconnection signalTraceconnection = (SignalTraceconnection) o;
    return Objects.equals(this.baseInfo, signalTraceconnection.baseInfo) &&
        Objects.equals(this.sourcePort, signalTraceconnection.sourcePort) &&
        Objects.equals(this.cableLineNo, signalTraceconnection.cableLineNo) &&
        Objects.equals(this.additionalInfo, signalTraceconnection.additionalInfo) &&
        Objects.equals(this.cableElid, signalTraceconnection.cableElid) &&
        Objects.equals(this.connectionHierarchy, signalTraceconnection.connectionHierarchy) &&
        Objects.equals(this.connectionType, signalTraceconnection.connectionType) &&
        Objects.equals(this.targetPort, signalTraceconnection.targetPort) &&
        Objects.equals(this.connectionElid, signalTraceconnection.connectionElid) &&
        Objects.equals(this.planView, signalTraceconnection.planView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseInfo, sourcePort, cableLineNo, additionalInfo, cableElid, connectionHierarchy, connectionType, targetPort, connectionElid, planView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalTraceconnection {\n");
    sb.append("    baseInfo: ").append(toIndentedString(baseInfo)).append("\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("    cableLineNo: ").append(toIndentedString(cableLineNo)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    cableElid: ").append(toIndentedString(cableElid)).append("\n");
    sb.append("    connectionHierarchy: ").append(toIndentedString(connectionHierarchy)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    targetPort: ").append(toIndentedString(targetPort)).append("\n");
    sb.append("    connectionElid: ").append(toIndentedString(connectionElid)).append("\n");
    sb.append("    planView: ").append(toIndentedString(planView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

